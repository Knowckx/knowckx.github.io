<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Knowckx's Blog</title><link>https://knowckx.github.io/post/</link><description>Recent content in Posts on Knowckx's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 12 Aug 2025 09:51:15 +0000</lastBuildDate><atom:link href="https://knowckx.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Shadcn的一个坑 forwardRef问题</title><link>https://knowckx.github.io/p/shadcn-react.forwardref/</link><pubDate>Sun, 27 Apr 2025 01:04:49 +0800</pubDate><guid>https://knowckx.github.io/p/shadcn-react.forwardref/</guid><description>&lt;h2 id="场景">场景
&lt;/h2>&lt;p>现在是晚上1点，今天被一个&lt;code>shadcn-ui&lt;/code>的问题坑了3个小时……&lt;/p>
&lt;p>啊， 我人生宝贵的三小时，够我打&lt;del>10把红警小块地&lt;/del>或者&lt;del>魔兽世界打完一个完整的团队本&lt;/del>。&lt;/p>
&lt;p>这里记录一下，假如你们遇到了，希望能节约一点你们的时间！&lt;/p>
&lt;h2 id="shadcn获取组件ref">Shadcn获取组件ref
&lt;/h2>&lt;p>&lt;code>Shadcn&lt;/code>增加UI组件的命令我想大家都知道&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pnpm dlx shadcn@latest init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pnpm dlx shadcn@latest add input
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>今天我遇到一个需求，在input组件加载后实现输入框自动聚焦，因此需要拿到input组件的&lt;code>ref&lt;/code>&lt;/p>
&lt;p>然后神奇的事件来了，我发现我没办法拿到&lt;code>shadcn&lt;/code>组件的ref&lt;br>
因为使用了&lt;code>pnpm dlx shadcn@latest add input&lt;/code>后&lt;br>
他生成的input代码长这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;react&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">cn&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@/lib/utils&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Input&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">props&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ComponentProps&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="s2">&amp;#34;input&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="kr">type&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">data-slot&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;input&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">cn&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;file:text-foreground placeholder:text-muted-foreground ...&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">className&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="na">...props&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Input&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>发现没，里面压根没有&lt;code>React.forwardRef&lt;/code>&lt;br>
要知道&lt;code>React.forwardRef&lt;/code>这条命令是在 React v16.3.0 版本中正式推出的，所以&lt;code>shadcn&lt;/code>早就应该带这个引用了&lt;/p>
&lt;h2 id="排查">排查
&lt;/h2>&lt;h2 id="代码对比">代码对比
&lt;/h2>&lt;p>然后我去官网比对了下代码版本:&lt;a class="link" href="https://ui.shadcn.com/docs/components/input" target="_blank" rel="noopener"
>官网的Input组件&lt;/a>&lt;br>
点开&lt;code>Installation - Manual&lt;/code>，这里是他手动安装的版本:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;react&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">cn&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@/lib/utils&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forwardRef&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">HTMLInputElement&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">React.ComponentProps&lt;/span>&lt;span class="err">&amp;lt;&lt;/span>&lt;span class="s2">&amp;#34;input&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">({&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">props&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现他的版本是有&lt;code>React.forwardRef&lt;/code>的。&lt;/p>
&lt;p>这说明，我的代码版本不对。&lt;/p>
&lt;h2 id="排查缓存问题">排查缓存问题：
&lt;/h2>&lt;p>代码文件是&lt;code>pnpm dlx shadcn@latest add input&lt;/code>这条命令生成的。&lt;br>
首先想到可能是 &lt;code>pnpm dlx&lt;/code> 拉代码时自身可能有缓存。&lt;/p>
&lt;p>执行&lt;code>pnpm store prune&lt;/code>，删除整个&lt;code>node_modules&lt;/code>，重新安装，没解决问题。&lt;/p>
&lt;h2 id="排查-registry">排查 Registry
&lt;/h2>&lt;p>我很奇怪，难道是pnpm dlx 因为某种原因没有拉取到最新的 CLI 版本？&lt;br>
pnpm对应的&lt;code>Registry&lt;/code>给了我旧版本的代码？&lt;/p>
&lt;p>找了下查和改Registry的方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pnpm&lt;/span> &lt;span class="nx">config&lt;/span> &lt;span class="kr">get&lt;/span> &lt;span class="nx">registry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pnpm&lt;/span> &lt;span class="nx">config&lt;/span> &lt;span class="kr">set&lt;/span> &lt;span class="nx">registry&lt;/span> &lt;span class="nx">https&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//registry.npmmirror.com/ --global
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我原来用的腾讯源，换到了淘宝源&lt;/p>
&lt;p>拉下来的组件代码还是没有带&lt;code>React.forwardRef&lt;/code>！&lt;/p>
&lt;p>又换了次官方源。还是一样。&lt;/p>
&lt;p>问了下Gemini, 他让我直接改源码，在源码里加上&lt;code>React.forwardRef&lt;/code>实现传递ref&lt;br>
因为这样的话相当于改了自动工具生成的文件，显然这个方案不好。&lt;/p>
&lt;h2 id="tailwind-v4--react19">Tailwind v4 + React19
&lt;/h2>&lt;p>这时候脑子就抓狂了，感觉这事也太奇怪了。 耐着性子继续查(&lt;del>反正老子今天不上班&lt;/del>)。&lt;/p>
&lt;p>为了缩小可能的范围，我准备创建一个新的最小包含Shadcn的mini项目来实验:&lt;/p>
&lt;p>&lt;a class="link" href="https://ui.shadcn.com/docs/installation/vite" target="_blank" rel="noopener"
>shadcn官网的安装流程&lt;/a>&lt;/p>
&lt;p>按照官网的说明，重新安装的过程中，我发现了一个细节， Shadcn官网提到了 &lt;code>Tailwind v4&lt;/code>和&lt;code>React19&lt;/code>的升级问题。&lt;/p>
&lt;p>我的本地版本是&lt;code>Tailwind v4&lt;/code>和&lt;code>React 18.3&lt;/code>&lt;br>
因为&lt;code>React19&lt;/code>是前几个月刚出的，我没更新，怕不稳定。(我习惯于用&lt;strong>上一个大版本的最后一个小版本&lt;/strong>)&lt;/p>
&lt;p>然后我开始检查&lt;code>React19&lt;/code>和&lt;code>React.forwardRef&lt;/code>的关系，然后发现了一个重要信息:&lt;/p>
&lt;p>&lt;a class="link" href="https://react.dev/reference/react/forwardRef" target="_blank" rel="noopener"
>react官方的React.forwardRef&lt;/a>&lt;/p>
&lt;p>这个API竟然已经被&lt;code>React19&lt;/code>打上了Deprecated！终于有了线索。&lt;/p>
&lt;p>后面接着查，我发现了这个&lt;a class="link" href="https://github.com/shadcn-ui/ui/issues/6739" target="_blank" rel="noopener"
>shadcn-ui的issue&lt;/a>，事情大体清楚了。&lt;/p>
&lt;h2 id="真相大白">真相大白
&lt;/h2>&lt;p>到了新的&lt;code>React19&lt;/code>这个版本后，想获取组件的ref不需要再使用&lt;code>React.forwardRef&lt;/code>&lt;br>
而shadcn为了支持&lt;code>Tailwind v4&lt;/code>和&lt;code>React 19&lt;/code>，已经完成了代码更新。&lt;br>
包括shadcn官网目前提供的&lt;code>Installation&lt;/code>说明, 实际上是支持了&lt;code>React 19&lt;/code>的版本&lt;/p>
&lt;p>而在用户这一边，当用户增加新的UI组件时，使用的默认命令行是&lt;/p>
&lt;blockquote>
&lt;p>pnpm dlx shadcn@latest add input&lt;/p>&lt;/blockquote>
&lt;p>因为用户本身输入的要求是&lt;code>shadcn@latest&lt;/code>。&lt;br>
既然是&lt;code>latest&lt;/code>，也就把最新的支持&lt;code>React19&lt;/code>的版本，没有使用&lt;code>React.forwardRef&lt;/code>的代码给用户了。&lt;/p>
&lt;p>坑点就是&lt;/p>
&lt;ul>
&lt;li>&lt;code>dlx shadcn@latest&lt;/code>这个命令行不会识别你用的react具体版本，自动把最新的组件代码给你了&lt;/li>
&lt;li>官网的&lt;code>Installation - Manual&lt;/code>没同步更新也没说明，使用的反而不是react19版本, 和CLI代码不同。&lt;/li>
&lt;/ul>
&lt;h2 id="解决方案">解决方案
&lt;/h2>&lt;p>解决方式有两种&lt;/p>
&lt;ol>
&lt;li>
&lt;p>别用&lt;code>shadcn@latest&lt;/code>，而是指定一个旧版本的组件。一切依然岁月静好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>激进。升级&lt;code>react19&lt;/code>。 我是本地小项目，所以直接就升级了。我把升级的命令行贴一下:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 升级react19 只推荐有把握的小项目直接升级
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pnpm install --save-exact react@^19.0.0 react-dom@^19.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pnpm install --save-exact @types/react@^19.0.0 @types/react-dom@^19.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pnpm update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>新版本&lt;code>React19&lt;/code>获取组件的ref很简单&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">inputRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useRef&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">HTMLInputElement&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 组件的Props
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">InputProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ref&lt;/span>: &lt;span class="kt">inputRef&lt;/span> &lt;span class="c1">// rect19 Props里可以直接传ref
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="na">...InputProps&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="感想">感想:
&lt;/h2>&lt;p>程序员的很多知识和技能，特别是对&lt;code>生产工具/框架&lt;/code>相关的，贬值真的很快。&lt;/p>
&lt;p>假设我们有一位前端程序员，学习使用React工作了一段时间，他获得了如下的开发经验:&lt;/p>
&lt;blockquote>
&lt;p>在 React 中，如果你想获取一个函数组件内部渲染的 DOM 元素的 ref，这个函数组件必须使用 &lt;code>React.forwardRef&lt;/code> 来包装。&lt;br>
否则，直接传递 ref prop 给这个函数组件是无效的（React 会发出警告），因为函数组件本身没有实例，ref 的目的是指向底层的 DOM 节点或类组件实例。&lt;/p>&lt;/blockquote>
&lt;p>而在2025年的4月的今天，这个经验已经&lt;strong>贬值为0&lt;/strong>。&lt;/p>
&lt;p>这也是很多程序员永远会&lt;strong>疲于奔命&lt;/strong>的原因，主流的开发技能，这部分的知识更新速度是很快的。&lt;br>
不仅自身需要时时学习，更何况现在还有&lt;strong>AI编程&lt;/strong>的入场。 真的是脚步停下来就会被淘汰。&lt;/p>
&lt;p>收工！&lt;/p></description></item><item><title>理解sync.once</title><link>https://knowckx.github.io/p/%E7%90%86%E8%A7%A3sync.once/</link><pubDate>Sun, 05 Jan 2025 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E7%90%86%E8%A7%A3sync.once/</guid><description>&lt;h3 id="synconce的使用">sync.once的使用
&lt;/h3>&lt;p>&lt;code>sync.Once&lt;/code>是go标准库的一个类型，用于在并发环境中保证某一段代码只被执行一次。&lt;/p>
&lt;p>通常，我们会用它来进行一些初始化的工作。比如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Test_Once&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">once&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Once&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">done&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">once&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Do&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">onceFunc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 执行十次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">done&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">KeyCount&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// output: 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">KeyCount&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">onceFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">KeyCount&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子中，onceFunc会被执行10次，但是因为我们用了&lt;code>sync.Once&lt;/code>，所以最终KeyCount只会被加一次。&lt;/p>
&lt;h3 id="synconce的源码">sync.once的源码
&lt;/h3>&lt;p>所以，他是怎么实现的呢？ 我们在IDE中点开&lt;code>sync.Once&lt;/code>的实现。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Once&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">done&lt;/span> &lt;span class="kt">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">m&lt;/span> &lt;span class="nx">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结构很简单，done用来标记执行过的状态，m就是锁。说白了还是靠锁。
继续看：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Once&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Do&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LoadUint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">doSlow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Once&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">doSlow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StoreUint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">f&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里就是比较有趣的地方了，&lt;/p>
&lt;p>首先他通过&lt;code>atomic.LoadUint32&lt;/code>这个原子操作来判断done这个Int是否已经被改过了。&lt;br>
并发操作有个原则，能用&lt;code>原子操作&lt;/code>的地方别用锁。原子操作效率更高。&lt;br>
在&lt;code>doSlow&lt;/code>中，可以看到加锁操作，临界区里再进行一次状态判断，随后改掉状态值。&lt;/p>
&lt;ul>
&lt;li>问题：明明已经拿到锁了，为什么还要再执行一次&lt;code>if o.done == 0&lt;/code>的判断呢?&lt;/li>
&lt;/ul>
&lt;p>仔细考虑了下，猜测在并发环境下，两个协程有机会同时通过了&lt;code>atomic.LoadUint32(&amp;amp;o.done) == 0&lt;/code>的检查，他们先后调用doSlow&lt;br>
比如协程A先拿到锁进入临界区，然后释放锁。 此时协程B会把临界区代码再执行一次！&lt;br>
因此临界区里也需要加入&lt;code>if o.done == 0&lt;/code>来让协程B早点返回。&lt;/p>
&lt;p>sync.once的代码写得真好啊，又短又精，很适合让我们学习。&lt;/p>
&lt;h3 id="synconce的扩展">sync.once的扩展
&lt;/h3>&lt;p>sync.Once可以保证代码只被执行一次，看完源码我的脑洞就来了。&lt;br>
工作中有一些执行比较重的后端接口（比如计划任务）需要有调用频率保护，&lt;br>
前端不小心连续点击了5次，而后端只希望5次中的1次可以成功调用，在这个接口执行完毕并返回以前，其他点击都要废弃。&lt;/p>
&lt;p>相当于保证同时只有一个实例在跑。是不是可以借用这个Once的实现呢？&lt;/p>
&lt;p>然后我就写一版。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">LimitOne&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">done&lt;/span> &lt;span class="kt">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">m&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">LimitError&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;We are working on the task! please try again later&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">LimitOne&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Do&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LoadUint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">LimitError&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StoreUint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StoreUint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">LimitError&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>大体按照sync.once的结构抄一遍， 唯一不同的是当传入的函数执行完之后，需要把done再设置为0。&lt;br>
此时又处于就绪状态，又可以接新的请求了。&lt;br>
以此来保证不论有多少请求，&lt;code>保证每次只有一个task在跑&lt;/code>。&lt;/p>
&lt;p>下班~&lt;/p></description></item><item><title>Git删除远程分支某次commit的方法</title><link>https://knowckx.github.io/p/git%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%9F%90%E6%AC%A1commit%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 18 Sep 2024 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/git%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%9F%90%E6%AC%A1commit%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>&lt;h2 id="懒人阅读版">懒人阅读版
&lt;/h2>&lt;p>找到你需要去掉的commit的前一次的commitID&lt;/p>
&lt;p>执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git rebase -i commit_id -X their
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进入编辑后 在vi里 drop掉不需要的commit&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git push -f &lt;span class="c1"># 覆盖远程分支&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样远程分支的那次commit就彻底消失了。&lt;/p>
&lt;p>&lt;code>git push -f&lt;/code>是高危操作 不是特殊时刻不要用&lt;/p>
&lt;hr>
&lt;h2 id="原文">原文
&lt;/h2>&lt;p>最近遇到一个问题，我们的项目代码里，之前把一些&lt;em>密码&lt;/em>配置明文传到了github，&lt;br>
但是公司的安全策略不希望我们在代码里直接留有敏感的账号凭证信息，否则会被扫出来合规性问题。&lt;/p>
&lt;p>按照我同事之前的经历：安全部门扫出来之后就会发邮件给你老板，让你半夜起来马上消掉。&lt;br>
因此产生了一个需求，怎么把github上已提交的敏感信息抹掉呢？&lt;/p>
&lt;p>我调研了下，目前已知有几种方式：&lt;/p>
&lt;h3 id="通过git-revert-commit_id来实现">通过git revert commit_id来实现
&lt;/h3>&lt;p>git revert 可以撤销某次操作，他是通过提交一次新的commit来回滚之前的一次commit的内容，
大部分情况下这个功能是够用的。&lt;/p>
&lt;p>不适用我们的场景，因为旧的commit实际上不会消失，在github直接打开旧的commit，还是可以看到对应密码信息，不合规。&lt;/p>
&lt;h3 id="通过git-reset-hard-commit_id">通过git reset &amp;ndash;hard commit_id
&lt;/h3>&lt;p>直接重置到密码提交前的那一次commit，然后&lt;code>git push -f&lt;/code>重置分支&lt;/p>
&lt;p>这样做的前提条件是需要提交密码的那一次commit是最近发生的，&lt;br>
不然就需要手动把后面的历史commit都补回来，工作量很大&lt;/p>
&lt;h3 id="通过git-rebase--i-来实现丢弃一个commit">通过git rebase -i 来实现丢弃一个commit
&lt;/h3>&lt;p>这是今天发现的解决方案，有点类似于以前git合并多个commit的操作。&lt;br>
下面说下流程：&lt;/p>
&lt;ol>
&lt;li>找到你需要丢弃的commit_id
在我的例子里，我在&lt;code>bdfb32a&lt;/code>这次提交里提交了密码&lt;br>
这次commit的前一次是&lt;code>0119c21&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>所以执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git rebase -i 0119c21 -X their
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解释:&lt;br>
-i 进入交互模式&lt;br>
-X their 方便后续的commit自动合并，不然你需要手动操作冲突。&lt;/p>
&lt;ol start="2">
&lt;li>这时进入了vi的编辑界面，此时git会把commit_id之后发生的commit列出来，&lt;/li>
&lt;/ol>
&lt;p>我们按i进入编辑，手动把不需要的那个commit &lt;code>bdfb32a&lt;/code>前面的&lt;code>pick&lt;/code>改成&lt;code>drop&lt;/code>.&lt;/p>
&lt;ol start="3">
&lt;li>然后vi和rebase的基本操作：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">esc, :wd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rebase --continue
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>手动push 覆盖远程分支&lt;/li>
&lt;/ol>
&lt;p>此时你通过查看历史，比如&lt;code>git log -10&lt;/code>&lt;br>
应该可以看到commit的历史已经改变了，&lt;code>bdfb32a&lt;/code>已经彻底消失了(被丢弃)。&lt;/p>
&lt;p>执行&lt;code>git push -f&lt;/code>&lt;/p>
&lt;p>再去github看一下&lt;/p>
&lt;p>&lt;code>0119c21&lt;/code>之后的这次&lt;code>bdfb32a&lt;/code>已经抹除。&lt;/p>
&lt;p>收工~！&lt;/p></description></item><item><title>git rebase有个坑</title><link>https://knowckx.github.io/p/git-rebase-push-rejected/</link><pubDate>Fri, 28 Apr 2023 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/git-rebase-push-rejected/</guid><description>&lt;h3 id="场景">场景:
&lt;/h3>&lt;p>这是一个Git在日常工作中非常核心的问题，很多工作了多年的同事也没吃透这个问题，没有正确理解&lt;code>merge&lt;/code>和&lt;code>rebase&lt;/code>的区别。 &lt;br>
今天我花时间自己做了几个实验，也算是明白了，记录一下。&lt;/p>
&lt;p>&lt;strong>常见场景&lt;/strong>&lt;br>
自己&lt;code>fork&lt;/code>了一个分支进行一个特性功能的开发，开发完了准备发起了&lt;code>PR&lt;/code>&lt;br>
结果发现在自己开发期间，&lt;code>主分支&lt;/code>有了几次新的合入。&lt;/p>
&lt;p>这时候你想把主分支的改动更新到本地。&lt;br>
为了让合并的历史更&lt;strong>优雅&lt;/strong>, 此时执行了&lt;code>git reabase upstream main&lt;/code>&lt;br>
此时问题来了，你会发现你的这个本地的分支&lt;code>push&lt;/code>不上去了。&lt;/p>
&lt;p>&lt;strong>原因&lt;/strong>&lt;br>
简单来说，&lt;code>git rebase&lt;/code> 操作修改了你本地分支的提交历史，使其与远程分支的提交历史产生了分歧。&lt;br>
Git为了保护远程分支不被意外覆盖，会拒绝你的&lt;code>non-fast-forward&lt;/code>推送。&lt;/p>
&lt;h3 id="正常的-git-push-流程">正常的 git push 流程
&lt;/h3>&lt;p>在没有冲突的情况下，&lt;code>git push&lt;/code> 遵循一个&lt;strong>快进式&lt;/strong>（Fast-forward）的原则。&lt;/p>
&lt;p>远程分支 (origin/my-feature) 的历史是:&lt;/p>
&lt;blockquote>
&lt;p>A &amp;mdash; B&lt;/p>&lt;/blockquote>
&lt;p>你拉取了代码，在本地 (my-feature) 继续工作，增加了提交 C:&lt;/p>
&lt;blockquote>
&lt;p>A &amp;mdash; B &amp;mdash; C&lt;/p>&lt;/blockquote>
&lt;p>当你执行 &lt;code>git push&lt;/code> 时，Git会比较你的本地分支和远程分支。&lt;br>
它发现你的本地分支只是在远程分支&lt;code>提交B&lt;/code>的基础上加了一个&lt;code>提交C&lt;/code>&lt;br>
于是它会执行一次&lt;strong>Fast-forward&lt;/strong>，直接把远程分支的指针移动到&lt;code>C&lt;/code>。&lt;br>
推送后，远程分支也变成了:&lt;/p>
&lt;blockquote>
&lt;p>A &amp;mdash; B &amp;mdash; C&lt;/p>&lt;/blockquote>
&lt;p>这个过程是最常见的，也是安全的，因为它只是在原有历史的末尾继续添加新内容，不会丢失任何东西。&lt;/p>
&lt;h3 id="git-rebase-的流程解释">git rebase 的流程解释
&lt;/h3>&lt;p>&lt;code>rebase&lt;/code> 的中文意思是&lt;strong>变基&lt;/strong>，它的核心作用是&lt;code>重写提交历史&lt;/code>，让分支历史变成一条直线更美观。&lt;/p>
&lt;p>假设你从 &lt;code>main&lt;/code> 分支切出了 &lt;code>my-feature&lt;/code> 分支并开始工作。&lt;/p>
&lt;blockquote>
&lt;p>main 分支: A &amp;mdash; B&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>my-feature 分支: A &amp;mdash; B &amp;mdash; C (你增加了提交 C)&lt;/p>&lt;/blockquote>
&lt;p>在你工作的时候，你的同事向 &lt;code>main&lt;/code> 分支推送了一个新的提交 D。&lt;/p>
&lt;blockquote>
&lt;p>main 分支现在是: A &amp;mdash; B &amp;mdash; D&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>你的 my-feature 分支还是: A &amp;mdash; B &amp;mdash; C&lt;/p>&lt;/blockquote>
&lt;p>此时，你的分支和 main 分支从提交 B 开始&lt;strong>分叉&lt;/strong>了。&lt;br>
为了让你的分支包含 main 的最新更改，你执行了 &lt;code>git rebase main&lt;/code>。&lt;/p>
&lt;p>rebase 会做以下事情：&lt;br>
a. 暂时&amp;quot;&lt;strong>收起&lt;/strong>&amp;ldquo;你在 &lt;code>my-feature&lt;/code> 分支上的独有提交（也就是 &lt;code>C&lt;/code>）。&lt;br>
b. 从与 &lt;code>main&lt;/code> 分支最后的共同提交B开始，抓取新增加的改动 &lt;code>D&lt;/code> 到 &lt;code>my-feature&lt;/code> 分支&lt;br>
c. 将刚才&lt;strong>收起&lt;/strong>的提交 &lt;code>C&lt;/code> 在新的起点 &lt;code>D&lt;/code> 上重新应用一遍。&lt;/p>
&lt;blockquote>
&lt;p>此时my-feature 分支变成了: A &amp;mdash; B &amp;mdash; D &amp;mdash; 收起的C&lt;/p>&lt;/blockquote>
&lt;p>关键点来了：&lt;br>
重新应用的 &lt;code>C&lt;/code> 这个提交，虽然代码内容没变，但它的&lt;code>父提交&lt;/code>从原来的 &lt;code>B&lt;/code> 变成了现在的 &lt;code>D&lt;/code>。&lt;br>
在Git中，一个提交的唯一标识&lt;code>SHA-1哈希值&lt;/code>是由其内容、作者、时间戳、以及&lt;strong>父提交&lt;/strong>等信息共同决定的。&lt;br>
&lt;strong>父提交&lt;/strong>变了，哈希值就会变！所以新的 &lt;code>C&lt;/code> 对应的hashID，和原来的 &lt;code>C&lt;/code> 是不同的 &lt;br>
你实际上得到一个内容完全一样，但是hashID变了的提交 &lt;code>C'&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>所以Rebase之后，my-feature 分支历史: A &amp;mdash; B &amp;mdash; D &amp;mdash; C'&lt;/p>&lt;/blockquote>
&lt;h3 id="为什么-rebase-后-push-会失败">为什么 rebase 后 push 会失败？
&lt;/h3>&lt;p>现在，我们来比较一下 &lt;code>rebase&lt;/code> 后的本地分支和远程分支&lt;/p>
&lt;blockquote>
&lt;p>本地 my-feature 分支: A &amp;mdash; B &amp;mdash; D &amp;mdash; C'&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>远程 origin/my-feature 分支: A &amp;mdash; B &amp;mdash; C&lt;/p>&lt;/blockquote>
&lt;p>当你执行 &lt;code>git push&lt;/code> 时，Git会进行比较，然后它会发现：
这两个分支从共同的祖先 B 开始就分道扬镳了。本地 &lt;code>my-feature&lt;/code>的历史里并没有包含远程的 &lt;code>C&lt;/code> 提交。&lt;br>
如果接受推送，远程的 &lt;code>C&lt;/code> 提交就会丢失，这太危险了！所以拒绝这次推送。&lt;/p>
&lt;p>这就是你看到的 (&lt;code>non-fast-forward&lt;/code>) 错误。&lt;br>
Git通过这个机制，防止你无意中覆盖掉远程仓库可能存在的、你本地没有的提交。&lt;/p>
&lt;h3 id="解决方式">解决方式:
&lt;/h3>&lt;p>&lt;strong>方式1&lt;/strong> 在使用&lt;code>fork&lt;/code>后的分支开发后，使用&lt;code>merge&lt;/code>策略来合并改动。&lt;br>
缺点: commit的历史线会比较混乱，不好看&lt;/p>
&lt;p>&lt;strong>方式2&lt;/strong> 使用&lt;code>reabse&lt;/code>后，搭配&lt;code>push -f&lt;/code>来强行更新&lt;strong>远程自己的分支&lt;/strong>，&lt;br>
Commit ID的历史会是一条直线，就像前面例子的&lt;code>A --- B --- D --- C'&lt;/code>，很会&lt;strong>优雅&lt;/strong>&lt;/p>
&lt;h3 id="解释push--f-的作用和风险">解释push -f 的作用和风险
&lt;/h3>&lt;p>&lt;code>git push --force&lt;/code> (或简写 &lt;code>-f&lt;/code>) 就是你给Git下的一个强制命令，意思是：&lt;/p>
&lt;blockquote>
&lt;p>“别管什么快进不快进了，也别管远程分支上有什么。我push给你的这个版本就是最终版本，你就用我这个版本去覆盖”&lt;/p>&lt;/blockquote>
&lt;p>执行 &lt;code>git push -f&lt;/code> 后，&lt;/p>
&lt;blockquote>
&lt;p>远程的 origin/my-feature 被强制更新为: A &amp;mdash; B &amp;mdash; D &amp;mdash; C'&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>git push -f&lt;/code> 是一个比较危险的操作，千万不要向公共分支（如 main, develop）执行 &lt;code>push -f&lt;/code>&lt;/p>
&lt;p>对于自己的特性分支执行是没有问题的。通常，一个特性分支只有你一个人在开发。&lt;br>
在你准备合并到主分支之前，用 rebase 来保持分支的整洁，然后用 &lt;code>push -f&lt;/code> 更新你自己的远程分支，这是非常常见的做法。&lt;/p>
&lt;p>&lt;strong>更安全的选择：&lt;code>git push --force-with-lease&lt;/code>&lt;/strong>&lt;br>
它在强制推送前会增加一个检查：只有当远程分支的状态和你本地最后一次拉取时一模一样，它才会执行强制推送。&lt;/p>
&lt;p>换句话说，如果在你执行 rebase 到你准备 push 的这段时间里，有其他人也向这个远程分支推送了新的提交，
&lt;code>--force-with-lease&lt;/code> 就会失败。这可以防止你覆盖掉别人在你不知情的情况下推送的工作。
日常工作中，推荐使用 &lt;code>git push --force-with-lease&lt;/code> 代替 &lt;code>git push -f&lt;/code>。&lt;/p></description></item><item><title>Python函数的默认参数为何不能是[]或{}？</title><link>https://knowckx.github.io/p/python-mutable-default-arguments-pitfall/</link><pubDate>Thu, 24 Jul 2025 11:12:34 +0800</pubDate><guid>https://knowckx.github.io/p/python-mutable-default-arguments-pitfall/</guid><description>&lt;p>今天在写一个股票行情的接口爬虫，为了方便我写了一个发送 POST 请求的函数。&lt;br>
签名类似于 &lt;code>do_post(url, post_data={})&lt;/code>&lt;br>
然后我把全部代码扔给&lt;code>Gemini&lt;/code>进行检查优化，它竟然提示我 &lt;code>post_data={}&lt;/code>这个写法存在一个经典的陷阱&lt;br>
我半信半疑去写了个简单的测试，结果发现还真是这样。&lt;/p>
&lt;p>我觉得很多人和我一样，也不知道这一点，过来记录一下&lt;/p>
&lt;h3 id="复现">复现
&lt;/h3>&lt;p>代码真的很简单，你可以先预测一下它的输出是什么。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fn_test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_map&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{}):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;函数开始时, input_map 是: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">input_map&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;token&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;函数结束时, input_map 变成: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">input_map&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;第一次调用&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fn_test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;第二次调用&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fn_test&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>如果你认为两次调用的输出会一模一样，那就掉进陷阱里了。&lt;/p>
&lt;p>实际的输出结果是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">--- 第一次调用 ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">函数开始时, input_map 是: {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">函数结束时, input_map 变成: {&amp;#39;token&amp;#39;: 123}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- 第二次调用 ---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">函数开始时, input_map 是: {&amp;#39;token&amp;#39;: 123}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">函数结束时, input_map 变成: {&amp;#39;token&amp;#39;: 123}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一次调用的输出是正常的&lt;/p>
&lt;p>但是第二次调用的输出就不对了，为什么第二次调用的第一次打印会是&lt;code>{'token': 123}&lt;/code> ？ 默认值不应该是一个空字典&lt;code>{}&lt;/code>吗？&lt;/p>
&lt;h3 id="原因">原因
&lt;/h3>&lt;p>这里python为我们留了一个坑，当函数声明的默认参数是一个可变对象时，比如dict或者list类型，&lt;/p>
&lt;p>所有外面在调用此函数未提供具体参数的，他们实际上&lt;code>都会共享同一个对象&lt;/code>。&lt;/p>
&lt;p>也就是第一次无参调用此函数，和第二次无参调用此函数，他们指向了同一个dict.&lt;/p>
&lt;p>那么假如在某次调用过程中，&lt;strong>无意间修改了这个dict&lt;/strong>，这个修改就会&lt;strong>污染&lt;/strong>后续所有无参的调用过程&lt;/p>
&lt;h3 id="解决方法">解决方法:
&lt;/h3>&lt;p>把签名改成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fn_test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputMap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">dict&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="kc">None&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只声明他可能会属于dict这个类型，但是实际值默认是&lt;code>None&lt;/code>&lt;/p>
&lt;p>反正记住一个简单的规则：不要使用&lt;code>可变对象（如 [] 或 {}）&lt;/code>作为函数的默认参数就可以了。&lt;/p>
&lt;blockquote>
&lt;p>AI写业务代码真的太强了，我准备好退休了&lt;/p>&lt;/blockquote></description></item><item><title>一行命令解决gemini-cli在国内卡认证的问题</title><link>https://knowckx.github.io/p/gemini-cli-auth-proxy-solution/</link><pubDate>Tue, 15 Jul 2025 11:12:34 +0800</pubDate><guid>https://knowckx.github.io/p/gemini-cli-auth-proxy-solution/</guid><description>&lt;p>&lt;code>gemini-cli&lt;/code> 是 Google Gemini 官方提供的一款强大的命令行工具，但是我自己在使用时，第一步——&lt;strong>认证授权&lt;/strong>时就遇到了问题。&lt;/p>
&lt;h3 id="长话短说">长话短说
&lt;/h3>&lt;p>我分别了测试了几种的挂梯子方式，最后的结论是:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>gemini-cli&lt;/code>的auth流程依赖于启动浏览器进行OAuth 2.0认证流程，整个流程不仅需要你在浏览器有科学上网环境，终端内部也需要通过&lt;code>HTTP_PROXY&lt;/code>来实现科学上网&lt;/p>&lt;/blockquote>
&lt;p>进一步说，为什么终端需要挂代理？&lt;br>
因为&lt;code>gemini&lt;/code>命令会启动一个本地Web服务器来接收&lt;code>Google的回调&lt;/code>，并启动浏览器，所以整个过程都需要能顺畅访问Google服务。&lt;/p>
&lt;h3 id="解决方案为你的终端设置代理">解决方案：为你的终端设置代理
&lt;/h3>&lt;ol>
&lt;li>请先在你的代理工具（如 Clash, V2RayN, Surge 等）中找到 HTTP 代理的端口号，通常是 &lt;code>7890&lt;/code>, &lt;code>10809&lt;/code> 等。&lt;/li>
&lt;li>然后根据你的不同操作系统输入以下命令&lt;/li>
&lt;/ol>
&lt;h4 id="windows-powershell">Windows (PowerShell)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$env:all_proxy&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;socks5://127.0.0.1:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$env:HTTP_PROXY&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$env:HTTPS_PROXY&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="linuxmacos">Linux/MacOS
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-BASH" data-lang="BASH">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 为当前终端会话设置代理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">HTTP_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">HTTPS_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># (可选，但推荐)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">all_proxy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;socks5://127.0.0.1:7890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>中国社会阶层金字塔</title><link>https://knowckx.github.io/p/china-social-class-pyramid/</link><pubDate>Sun, 25 May 2025 02:40:34 +0800</pubDate><guid>https://knowckx.github.io/p/china-social-class-pyramid/</guid><description>&lt;ul>
&lt;li>吃饭时想对未来几年再做一次规划，突然想到了这个问题。所以花了2小时，把我目前认知下&lt;code>社会阶层金字塔&lt;/code>梳理了一遍&lt;/li>
&lt;li>其实这个认知，最好在&lt;code>上大学时&lt;/code>或者&lt;code>刚工作几年&lt;/code>能获得，可以提前少走很多弯路。&lt;br>
很多人出身普通，又没人指导，就会觉醒得很慢。&lt;del>比如像我一样，30多岁了，才觉悟社会的运行方式。&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>中国社会层级表&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>层级&lt;/th>
&lt;th>角色等级&lt;/th>
&lt;th>体制内&lt;/th>
&lt;th>泛体制&lt;/th>
&lt;th>体制外&lt;/th>
&lt;th>权力-资源-影响力&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>塔尖&lt;/td>
&lt;td>国家领导人&lt;/td>
&lt;td>政治局常委&lt;/td>
&lt;td>无&lt;/td>
&lt;td>无&lt;/td>
&lt;td>决定国家大政方针，战略发展方向&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>上层&lt;/td>
&lt;td>高级权力&lt;br>顶尖科学家&lt;br>精英资本层&lt;/td>
&lt;td>副国级&lt;br>省部级&lt;/td>
&lt;td>大型央企董事长/党委书记&lt;br>两院院士，上将&lt;/td>
&lt;td>顶级民营企业家&lt;br>权力资本精英&lt;/td>
&lt;td>对特定领域/地区有显著影响力&lt;br>与政治权力有着千丝万缕的联系&lt;br>对很多社会资源拥有分配权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中上层&lt;/td>
&lt;td>高级管理&lt;br>专家学者&lt;br>中等资本层&lt;/td>
&lt;td>厅局级&lt;br>&lt;/td>
&lt;td>大型事业单位/国企领导层&lt;br>知名专家学者&lt;br>少将、中将&lt;br>&lt;/td>
&lt;td>大型民企/外企高管层&lt;br>知名投资人&lt;br>知名艺术家/明星/作家&lt;br>头部主播，顶尖电竞选手&lt;/td>
&lt;td>一定的政策建议权，高层的人脉资源&lt;br>行业内较高的话语权，影响行业标准&lt;br>富人阶层，生活优渥，日常消费奢侈品&lt;br>顶部择偶优先权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中层-3&lt;/td>
&lt;td>中层管理&lt;br>各行业精英代表&lt;/td>
&lt;td>处级&lt;br>副处级&lt;/td>
&lt;td>事业单位/国企中层管理&lt;br>头部大学资深教授&lt;br>医院科室负责人&lt;br>上校、大校&lt;/td>
&lt;td>大型民企/外企中层管理&lt;br>核心技术的专家岗位&lt;br>中等规模的企业主&lt;br>基金经理，律所合伙人&lt;br>知名主播，知名电竞选手&lt;/td>
&lt;td>拥有一定社会地位&lt;br>通常拥有多套房产，拥有被动收入&lt;br>无明显生活压力，选择性消费奢侈品&lt;br>可能有发达国家的绿卡/国籍/房产&lt;br>高择偶优先权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中层-2&lt;/td>
&lt;td>基层管理&lt;br>资深专业人士&lt;br>&lt;/td>
&lt;td>科级&lt;br>副科级&lt;br>&lt;/td>
&lt;td>事业单位/国企基层管理&lt;br>资深教师/医生&lt;br>少校、中校&lt;/td>
&lt;td>大型民企/外企的基层管理&lt;br>资深技术岗&lt;br>小型企业主&lt;br>资深律师&lt;br>&lt;/td>
&lt;td>拥有一定专业技能或管理经验&lt;br>通常拥有一套自住房(可能有房贷)&lt;br>收入的主要构成还是工资性收入&lt;br>生活压力存在但是可以应对&lt;br>偶尔会消费奢侈品&lt;br>一流大学学历/海外留学经历&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中层-1&lt;/td>
&lt;td>社会的中坚力量&lt;br>一般专业人士&lt;/td>
&lt;td>科员&lt;/td>
&lt;td>普通事业单位/国企员工&lt;br>普通教师/医生&lt;/td>
&lt;td>一般白领，普通专业岗/技术岗&lt;br>普通财务、工程师、设计师&lt;br>初级律师，高级技工&lt;br>个体工商户，小型餐厅经营者&lt;/td>
&lt;td>所在城市没有房产，租房/存首付中&lt;br>依赖工资收入，存在明显的生活压力&lt;br>努力寻求向上流动的机会&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>中下层&lt;/td>
&lt;td>基础性工作的劳动者&lt;br>低收入人员群体&lt;/td>
&lt;td>/&lt;/td>
&lt;td>事业单位编外人员&lt;/td>
&lt;td>小微企业职员&lt;br>基础性服务业人员&lt;br>兼职外卖骑手&lt;br>普通农民/底层建筑工人&lt;/td>
&lt;td>综合收入不高，对物价敏感&lt;br>工作岗位强度大，加班多，福利少&lt;br>可能没有好的学历&lt;br>择偶市场优先权低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>底层&lt;/td>
&lt;td>生活困难群体&lt;br>&lt;/td>
&lt;td>/&lt;/td>
&lt;td>/&lt;/td>
&lt;td>无积蓄的失业人员&lt;br>偏远地区贫困户，困难户&lt;br>微薄养老金的老人&lt;br>偏远地区的农民&lt;/td>
&lt;td>经济状况差，生活拮据，缺少积蓄。&lt;br>缺乏稳定收入来源。&lt;br>依赖社会保障体系。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>提几点感想&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>各阶层之间没有明确的界限，存在大量中间状态和交叉地带。&lt;br>
比如一个拥有多套房产的退休普通教师，很可能比一些小型企业主更富裕。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大部分人在社会中的一生，就是在玩一个&lt;code>角色扮演游戏&lt;/code>:&lt;br>
&lt;strong>一个不断消耗角色有限的生命，进行智力上的投入，努力上的投入，来争取更高的社会层级的过程。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大到改变事情走向，小到搞钱择偶，越高的层级优势越明显。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从过去的历史看来，越到中后期，阶级的流动性越减少，&lt;code>阶级固化&lt;/code>越严重，社会的活力也逐渐消失&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其实也不用那么卷，每个生命都有自己的活法，提升社会层级只是可选任务。&lt;br>
每天正常上班，下班打打游戏整点个人兴趣，就这么度过一生，也是一种活法。自己开心才是最重要的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr></description></item><item><title>golang错误处理 使用errors包</title><link>https://knowckx.github.io/p/golang%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-%E4%BD%BF%E7%94%A8errors%E5%8C%85/</link><pubDate>Tue, 29 Oct 2024 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/golang%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-%E4%BD%BF%E7%94%A8errors%E5%8C%85/</guid><description>&lt;p>我发现身边不少写了3年以上的go开发并未注意到这一点, 感觉很多人都没养成好习惯。&lt;/p>
&lt;p>Go的默认写法，对错误处理的支持太简单了，这会导致排查错误不方便。&lt;/p>
&lt;p>最常见错误处理方式是在调用链一层一层向上抛错误，但是每层调用处直接&lt;code>return err&lt;/code>这样是不好的， &lt;br>
因为最上层打印错误的时候只有一行错误字符串，中间的&lt;strong>错误栈&lt;/strong>全部丢失了，这不方便定位错误在代码中的传递过程。&lt;/p>
&lt;p>推荐日常工作中应该尽量使用&lt;strong>errors&lt;/strong>包带上栈信息。 包：&lt;code>&amp;quot;github.com/pkg/errors&amp;quot;&lt;/code>&lt;br>
这个包最大的作用就是用error加上stack记录&lt;/p>
&lt;p>示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/pkg/errors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Test_Errors&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">CallFunc1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 第1层调用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%+v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 必需是%+v 才能打印出stack信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">CallFunc1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">CallFunc2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 第2层调用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">CallFunc2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetBaseError&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 第3层调用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">GetBaseError&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;base error&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出结果(调用栈)：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">===&lt;/span> RUN Test_Errors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">base error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">github.com/Knowckx/Asuka/QuickTest.CallFunc1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /Users/i51111/dev/AsukaProj/Asuka/QuickTest/main_test.go:18
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">github.com/Knowckx/Asuka/QuickTest.Test_Errors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /Users/i51111/dev/AsukaProj/Asuka/QuickTest/main_test.go:11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">testing.tRunner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /usr/local/go/src/testing/testing.go:1194
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">runtime.goexit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /usr/local/go/src/runtime/asm_amd64.s:1371
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- PASS: Test_Errors &lt;span class="o">(&lt;/span>0.00s&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：&lt;/p>
&lt;p>打印错误的时候需要%+v 才能打印出stack信息&lt;/p>
&lt;p>假如你的日志包用的&lt;code>zerolog&lt;/code>，需要配置成这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">zerolog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ErrorStackMarshaler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">pkgerrors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MarshalStack&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假如想判断具体的错误就使用&lt;strong>Cause&lt;/strong>方法&lt;/p></description></item><item><title>使用二进制来存储多个布尔值</title><link>https://knowckx.github.io/p/%E4%BD%BF%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9D%A5%E5%AD%98%E5%82%A8%E5%A4%9A%E4%B8%AA%E5%B8%83%E5%B0%94%E5%80%BC/</link><pubDate>Sat, 27 Apr 2024 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E4%BD%BF%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9D%A5%E5%AD%98%E5%82%A8%E5%A4%9A%E4%B8%AA%E5%B8%83%E5%B0%94%E5%80%BC/</guid><description>&lt;p>最近遇到一个需求，需要在数据库保存一组配置，每个配置都是一个bool值，表示表的那一列是否开启了&lt;/p>
&lt;p>按照最常见的做法，需要每有一个bool值就加一个表字段， 这样做有两个问题:&lt;/p>
&lt;ol>
&lt;li>bool值比较多的时候，需要在数据库里对应创建的字段就比较多，打开表一看全是bool值，信息密度低。&lt;/li>
&lt;li>不方便动态调整，比如上线后业务说想要加一个bool配置，数据库表加字段并不方便，特别是生产环境&lt;/li>
&lt;/ol>
&lt;p>这时候我想起&lt;code>linux&lt;/code>那个用来改文件权限的命令， &lt;code>chmod 777&lt;/code>.&lt;br>
这里的777是有含意的.
简单来说，&lt;/p>
&lt;blockquote>
&lt;p>1 = 001 执行权限&lt;br>
2 = 010 写权限&lt;br>
4 = 100 读权限&lt;br>
7 = 111 全部权限&lt;/p>&lt;/blockquote>
&lt;p>3个7，&lt;code>777&lt;/code>表示三种用户，都有全部权限。&lt;br>
&lt;code>chmod 777&lt;/code>意思就是把这个文件的所有权限都开放出来&lt;/p>
&lt;p>按照这个思路，我们日常遇到多个bool配置的时候，也可以使用这个方式通过一个int字段来存储大量的bool值，&lt;br>
唯一需要注意的是需要在代码里固定好bool字段对应的顺序。&lt;/p>
&lt;p>Talk is cheap, show the code below:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Golang" data-lang="Golang">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// golang code&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// a lot of bool fields&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">BoolConfig&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">IsAddName&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="c1">//1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">IsAddAddress&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="c1">//2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">IsAddEamil&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="c1">//3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">IsAddAge&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="c1">//4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">IsAddPwd&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="c1">//5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ToBin return binary like: FTFFF -&amp;gt; &amp;#34;01000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">BoolConfig&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">ToBin&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ValueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rst&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Kind&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nx">reflect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Struct&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NumField&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">val&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Field&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Interface&lt;/span>&lt;span class="p">().(&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">val&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rst&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">rst&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rst&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">rst&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">rst&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// binary to Decimal 1010 -&amp;gt; 10 | 111 -&amp;gt; 7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">BinDec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ss&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">l&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ss&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">d&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">float64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ParseFloat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ss&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">d&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">f&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">float64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">l&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Test_ToBin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cf&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">BoolConfig&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">IsAddAddress&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Config: %+v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cf&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resBin&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">cf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ToBin&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bin: %+v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">resBin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 01000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">BinDec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resBin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dec: %+v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dec&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面这段代码，主要的意思就是把配置视为一个二进制数，二进制的每一位通过&lt;code>1&lt;/code>和&lt;code>0&lt;/code>两种状态表示&lt;code>true&lt;/code>和&lt;code>false&lt;/code>&lt;br>
这样通过存一个&lt;code>uint&lt;/code>类型就可以实现存很多个&lt;code>bool&lt;/code>类型的配置&lt;/p></description></item><item><title>先保髓 再根管</title><link>https://knowckx.github.io/p/%E5%85%88%E4%BF%9D%E9%AB%93-%E5%86%8D%E6%A0%B9%E7%AE%A1/</link><pubDate>Sun, 10 Mar 2024 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E5%85%88%E4%BF%9D%E9%AB%93-%E5%86%8D%E6%A0%B9%E7%AE%A1/</guid><description>&lt;blockquote>
&lt;p>注: 这是之前在其他平台发的帖子，现在整合到自己的Blog来。&lt;/p>&lt;/blockquote>
&lt;h2 id="先保髓-再根管">先保髓 再根管
&lt;/h2>&lt;p>写这篇文章来源于自己的切身经历&lt;/p>
&lt;p>牙齿深龋时牙医为什么优先做根管呢？&lt;/p>
&lt;h3 id="保髓治疗补牙">保髓治疗+补牙
&lt;/h3>&lt;p>根据炎症情况，保活髓的尝试存在失败概率，假如患者不理解保髓的意义，容易导致医患纠纷。&lt;/p>
&lt;blockquote>
&lt;p>医生:我在帮你保活髓，给了你最好的治疗方案&lt;br>
患者:我去你那看了一次，没成功，又要给我做根管？要我付两次钱？？ 庸医！！&lt;/p>&lt;/blockquote>
&lt;p>但是一旦保髓成功，对患者来说这是最好的结局，保住了一颗活牙。&lt;/p>
&lt;p>保髓治疗费用低，国内价格&lt;strong>1000元&lt;/strong>以内&lt;/p>
&lt;h3 id="根管治疗">根管治疗：
&lt;/h3>&lt;p>根管治疗在名字上有误导性，实际上是&amp;quot;杀死牙神经&amp;quot;的治疗方式&lt;/p>
&lt;p>1.根管本身成功率高，不容易导致医患纠纷&lt;br>
2.根管花费更多。治疗+&lt;strong>牙套&lt;/strong> 费用&lt;strong>3000元~5000元&lt;/strong>&lt;br>
3.还有一个隐藏的信息差：根管后这颗牙就是没有牙髓的死牙。&lt;br>
因为没有了牙髓提供的养分，无论你戴不戴牙冠，最后牙齿都会脆化崩裂。&lt;br>
后续的流程就是 拔牙 -&amp;gt; 种牙，种牙治疗费用上万。&lt;br>
所以在患者做完根管之后的那一刻起，走到种牙这一步&lt;strong>只是时间早晚&lt;/strong>的问题罢了。&lt;/p>
&lt;p>这是个利益至上的世界，假如有一个医生愿意告诉你除了根管之外还有保髓的方案可以尝试，&lt;br>
恭喜你，你遇到了一个愿意为患者考虑的好医生，他在设身处地为你提供最好的方案。&lt;br>
(推荐加上他微信，值得长期深交)&lt;/p>
&lt;p>而事实上，很多医生利用信息差&lt;strong>滥用根管&lt;/strong>，中龋，深龋近髓也直接根管。&lt;br>
从来不想给你保髓的机会，甚至都不想告诉你有这个选项。&lt;br>
毕竟，又有谁会和钱过不去呢？&lt;/p>
&lt;p>最后，平时刷牙一定要用&lt;code>含氟&lt;/code>的牙膏！！&lt;strong>这是人类历史上保护牙齿性价比最高的方案！&lt;/strong>&lt;/p></description></item><item><title>位运算表示int的范围</title><link>https://knowckx.github.io/p/%E4%BD%8D%E8%BF%90%E7%AE%97%E8%A1%A8%E7%A4%BAint%E7%9A%84%E8%8C%83%E5%9B%B4/</link><pubDate>Sat, 29 Jul 2023 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E4%BD%8D%E8%BF%90%E7%AE%97%E8%A1%A8%E7%A4%BAint%E7%9A%84%E8%8C%83%E5%9B%B4/</guid><description>&lt;h3 id="int32的取值范围">int32的取值范围
&lt;/h3>&lt;p>今天刷题时需要用到int32的取值范围，查了下是“-2147483648”到“2147483647”，有没有办法快速表示这个数呢？&lt;/p>
&lt;p>在我翻了其他人的leetcode提交后发现一个有趣的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">int32min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">31&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">int32max&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">31&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="err">写个&lt;/span>&lt;span class="n">UT打印一下&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">也是正确的。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">func&lt;/span> &lt;span class="n">Test_PrintConstInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">testing&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">int32min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">int32max&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2147483648&lt;/span> &lt;span class="mi">2147483647&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于位运算很多东西都扔回给老师了，今天再补一下知识&lt;/p>
&lt;h3 id="位运算左移和右移">位运算，左移和右移
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&amp;laquo; 表示左移
对于一个正数 左移N位 = 乘2n次方&lt;br>
比如：&lt;br>
1100（12） 左移1位 –&amp;gt; 11000(24)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;gt;&amp;gt; 表示右移
对于一个正数 右移N位 = 除2n次方&lt;br>
比如：&lt;br>
1100（12） 右移1位 –&amp;gt; 110(6)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>int32的范围大小: &lt;code>[-1 &amp;lt;&amp;lt; 31，1&amp;lt;&amp;lt;31 - 1]&lt;/code>&lt;/p>
&lt;p>精准，高逼格，High Level!&lt;/p></description></item><item><title>go的原子操作</title><link>https://knowckx.github.io/p/go%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 09 Mar 2023 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/go%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid><description>&lt;p>想要实现一个无锁的并发程序编写，那么直接对变量进行原子操作就是很好的选择，趁这个机会把go提供的几个原子方法学习一下。&lt;/p>
&lt;p>go在&lt;code>sync/atomic&lt;/code>包里对Int32，Int64等几个基本类型都定义了相同的一套方法， 下面以Int64为例：&lt;/p>
&lt;p>几个方法的含义比较简单，从函数名就能看出含义。&lt;/p>
&lt;blockquote>
&lt;p>StoreInt64 存&lt;br>
LoadInt64 取&lt;br>
AddInt64 加法&lt;br>
SwapInt64 交换&lt;br>
CompareAndSwapInt64 判断并交换&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Test_AtomicFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">counter&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">StoreInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// output: 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LoadInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// output: 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// output: 12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SwapInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">22&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// output: 22&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CompareAndSwapInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">22&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// output: 32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们平时用地比较多的是&lt;code>CompareAndSwap&lt;/code>（简称 CAS）方法，假如值不等于old，那就设置成一个新值new.
这可以在不加锁的前提下完成对变量值的判断和更新&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Test_CompareAndSwap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">first&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CompareAndSwapInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;第一个完成赋值的goroutine&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;最后的值 num:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LoadInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">first&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出结果:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">==&lt;/span>&lt;span class="p">=&lt;/span> &lt;span class="nx">RUN&lt;/span> &lt;span class="nx">Test_CompareAndSwap&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2022&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mo">05&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mo">07&lt;/span> &lt;span class="mo">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">18&lt;/span> &lt;span class="nx">第一个完成赋值的goroutine&lt;/span> &lt;span class="mi">13&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2022&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mo">05&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mo">07&lt;/span> &lt;span class="mo">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">20&lt;/span> &lt;span class="nx">最后的值&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">13&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以看出虽然开了1000个goroutine,但是只有第13个抢到了赋值的机会.&lt;/p>
&lt;p>在他赋值之后，其他的goroutine都会compare失败而退出，从而不需要加锁就完成了竞争条件的设定。&lt;/p>
&lt;p>简单好用~&lt;/p></description></item><item><title>关于Golang切片的几个注意点</title><link>https://knowckx.github.io/p/%E5%85%B3%E4%BA%8Egolang%E5%88%87%E7%89%87%E7%9A%84%E5%87%A0%E4%B8%AA%E6%B3%A8%E6%84%8F%E7%82%B9/</link><pubDate>Mon, 02 Jan 2023 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E5%85%B3%E4%BA%8Egolang%E5%88%87%E7%89%87%E7%9A%84%E5%87%A0%E4%B8%AA%E6%B3%A8%E6%84%8F%E7%82%B9/</guid><description>&lt;p>今天刷题&lt;code>leetcode no.78&lt;/code>-子集问题，其中遇到一个Slice的语法坑，&lt;br>
查了半小时最后才定位是切片的使用问题。&lt;br>
搞定之后顺便翻阅了一下slice的实现原理，把以前总结的点也放一起做个小记录。&lt;/p>
&lt;h3 id="slice的实现">slice的实现
&lt;/h3>&lt;p>先看一下slice的结构体(&lt;a class="link" href="https://go.dev/src/runtime/slice.go" target="_blank" rel="noopener"
>https://go.dev/src/runtime/slice.go&lt;/a>)定义：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">slice&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">array&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">len&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cap&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一个切片本身指向了一个底层数组，&lt;br>
len表示目前的元素数量，cap表示这个slice最大的元素容量&lt;/p>
&lt;h3 id="注意区分len和cap">注意区分len和cap
&lt;/h3>&lt;p>len和cap是第一个要理清的概念，特别是当我们使用make去创建新切片时&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的代码中，s1的输出结果是[0 0 0]，
cap=len=3,有3个元素，最大容量是3，3个元素都是这个类型的初始值，也就是0&lt;/p>
&lt;p>而s2的结果是[]，cap=3 len=0, 目前是0个元素，是个空切片。&lt;/p>
&lt;h3 id="扩容的性能问题">扩容的性能问题
&lt;/h3>&lt;p>容量 = cap, 是目前切片已经预分配的内存能够容纳的最大元素个数&lt;/p>
&lt;p>我们通过append操作向切片加元素，一但超过了切片的容量，就需要分配新的内存，并将当前切片所有的元素拷贝到新的内存块上。&lt;/p>
&lt;p>这里就有一道喜闻乐见的面试题了，&lt;/p>
&lt;blockquote>
&lt;p>go的切片扩容机制是什么样的&lt;/p>&lt;/blockquote>
&lt;p>而这个答案直接看源码就能找到，注释是这么写的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Transition from growing 2x for small slices&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// to growing 1.25x for large slices. This formula&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>切片在容量在比较小的时候，容量是通过x2的倍数扩大的，
cap当达到一个阈值时，以1.25倍的方式扩容。&lt;/p>
&lt;p>所以我们写代码的时候要注意两点：&lt;/p>
&lt;ul>
&lt;li>尽量在声明时就确定切片的大小，免得反复扩容。&lt;/li>
&lt;li>大容量的切片应该复用，减少频繁申请内存。&lt;/li>
&lt;/ul>
&lt;h3 id="slice的切片操作不会生成新的数组">Slice的切片操作不会生成新的数组
&lt;/h3>&lt;p>这个问题就是我今天遇到的，当我们对一个切片执行切片操作时，新的切片指向的是原来切片的底层数组。&lt;br>
所以当我们向新的切片append的时候，也改变了老切片的值&lt;/p>
&lt;p>示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Test_Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s1&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// 切片操作 s2为[1 2]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// s2为[1 2 5]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 现在s1是多少呢?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后s1的值是 [1 2 5 4]!! 很难理解吧。&lt;br>
因为上面的代码里，s2是从s1切片出来的，向s2添加元素后，实际上也在修改s1的值&lt;/p>
&lt;p>想要生成一个完全不同的底层数组怎么办？&lt;/p>
&lt;p>引申：拷贝一个切片的最佳实践&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">CopySlice&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nums&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newNums&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">newNums&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>k8s端口转发脚本</title><link>https://knowckx.github.io/p/k8s%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%84%9A%E6%9C%AC/</link><pubDate>Fri, 22 Jul 2022 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/k8s%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%84%9A%E6%9C%AC/</guid><description>&lt;h2 id="k8s端口转发原理">k8s端口转发原理
&lt;/h2>&lt;p>我们知道有一些数据库或者服务的API设有白名单机制, 只有在特定的生产集群内部才能访问。&lt;br>
因为不对公网暴露，我们本地肯定是访问不了的。&lt;/p>
&lt;p>而在日常工作嘛，总会有一些紧急需求需要连上这些服务，在本地进行一些调试、触发、执行SQL什么的临时性操作，
那这时候就需要把对应的端口转发出来。&lt;/p>
&lt;p>我们知道&lt;code>kubectl port-forward&lt;/code>可以把k8s的&lt;code>service&lt;/code>转发到你的本地，&lt;br>
因此一个常见的做法就是在k8s上创建一个pod专门作为转接，由这个Pod去访问目标端口，&lt;br>
同时通过&lt;code>port-forward&lt;/code>把对应的pod和端口转到你本地，这样就可以在本地进行连接调试了。&lt;/p>
&lt;p>下面发一下我日常使用的脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># args&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">KubeCfg&lt;/span>&lt;span class="o">=&lt;/span>test--prod &lt;span class="c1"># 目标集群的kubeconfig -- kubecm的列表项&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">NameSpace&lt;/span>&lt;span class="o">=&lt;/span>test-ns &lt;span class="c1"># 目标ns&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REMOTE_HOST&lt;/span>&lt;span class="o">=&lt;/span>test.remotehost.com &lt;span class="c1"># 需要转发的目标host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REMOTE_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5432&lt;/span> &lt;span class="c1"># 需要转发的目标port&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LOCAL_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5439&lt;/span> &lt;span class="c1"># 本地port&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TEMP_POD_NAME&lt;/span>&lt;span class="o">=&lt;/span>test-portjump &lt;span class="c1"># 用于转发的pod名称&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubecm switch &lt;span class="nv">$KubeCfg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 脚本退出时自动清理掉pod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> cleanup &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;cleanup...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kubectl delete -n &lt;span class="nv">$NameSpace&lt;/span> pod/&lt;span class="nv">$TEMP_POD_NAME&lt;/span> --grace-period &lt;span class="m">1&lt;/span> --wait&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> cleanup EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl run -n &lt;span class="nv">$NameSpace&lt;/span> --image marcnuri/port-forward &lt;span class="nv">$TEMP_POD_NAME&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --env &lt;span class="nv">REMOTE_HOST&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$REMOTE_HOST&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --env &lt;span class="nv">REMOTE_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$REMOTE_PORT&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --env &lt;span class="nv">LOCAL_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$REMOTE_PORT&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --port &lt;span class="nv">$REMOTE_PORT&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --restart&lt;span class="o">=&lt;/span>Never
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl &lt;span class="nb">wait&lt;/span> -n &lt;span class="nv">$NameSpace&lt;/span> --for&lt;span class="o">=&lt;/span>&lt;span class="nv">condition&lt;/span>&lt;span class="o">=&lt;/span>Ready pod/&lt;span class="nv">$TEMP_POD_NAME&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl port-forward -n &lt;span class="nv">$NameSpace&lt;/span> pod/&lt;span class="nv">$TEMP_POD_NAME&lt;/span> &lt;span class="nv">$LOCAL_PORT&lt;/span>:&lt;span class="nv">$REMOTE_PORT&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="nb">true&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> sleep &lt;span class="m">60&lt;/span> &lt;span class="p">;&lt;/span> nc -vz 127.0.0.1 &lt;span class="nv">$LOCAL_PORT&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span> &lt;span class="c1"># 保持连接&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>两个注意点：&lt;/p>
&lt;ul>
&lt;li>这个脚本需要安装一个&lt;code>kubecm&lt;/code>，这是一个常用的切&lt;code>kubeconfig&lt;/code>的工具&lt;/li>
&lt;li>脚本的最后写了一个循环，是因为kubectl port-forward这个命令在5min中没有操作的话会自动断开连接。&lt;br>
实际工作中你可能出去倒杯咖啡就断了。因此需要需要这个循环来保持连接。&lt;br>
(这个东西我翻了很多资料，这应该是client这边最好的保持连接的方式了)
不要滥用这个脚本。&lt;br>
理论上这个脚本可以让你连上生产环境的一切地址~&lt;/li>
&lt;/ul>
&lt;p>一定要小心呐。一定要小心呐。一定要小心呐。&lt;/p></description></item><item><title>go打印嵌套的复杂结构体</title><link>https://knowckx.github.io/p/go%E6%89%93%E5%8D%B0%E5%B5%8C%E5%A5%97%E7%9A%84%E5%A4%8D%E6%9D%82%E7%BB%93%E6%9E%84%E4%BD%93/</link><pubDate>Sat, 02 Jul 2022 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/go%E6%89%93%E5%8D%B0%E5%B5%8C%E5%A5%97%E7%9A%84%E5%A4%8D%E6%9D%82%E7%BB%93%E6%9E%84%E4%BD%93/</guid><description>&lt;p>这个需求其实在日常写代码中比较常见，比如调一个接口返回来一个结果，&lt;br>
这时想看一下这个变量有什么内容&lt;br>
假如使用fmt的&lt;code>%v&lt;/code> 或者 &lt;code>%+v&lt;/code>, 那只能打印简单类型的结构体，对于嵌套的复杂结构体就不行了。&lt;/p>
&lt;p>而使用反射去一层一层解析又太麻烦，我想找一种简单方便的方式。&lt;br>
昨天中午正在吃饭时，突然想到可以通过json的Marshal方式输出变量的内容。&lt;/p>
&lt;p>写一下示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Age&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Home&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Home&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Home&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Address&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">PeopleLives&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">PeopleInfo&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出一个结构体嵌套的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">GenTestUser&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ho&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">Home&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ho&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Address&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;beijing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ho&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PeopleLives&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Raman Kalita&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Abhishek Garg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ho&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PeopleInfo&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Raman Kalita&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;civil servant&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Abhishek Garg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;teacher&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">us&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">User&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">us&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Alise&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">us&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">31&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">us&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Home&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">ho&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">us&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Test_PrintJson&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">testing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">us&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GenTestUser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">PrintJson&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">us&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// PrintJson 通过json序列化打印数据内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">PrintJson&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">in&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MarshalIndent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">in&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;\t&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// beautiful json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Stack&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Send&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出的结果:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Alise&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">31&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Home&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Address&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;beijing&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;PeopleLives&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Raman Kalita&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Abhishek Garg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;PeopleInfo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Abhishek Garg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;teacher&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Raman Kalita&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;civil servant&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到Home这个结构体也打印出来了，无论是map还是slice输出都是OK的，
PrintJson这个函数才几行？ 简单好用~&lt;/p></description></item><item><title>总结一下k8s查询secret几种方式</title><link>https://knowckx.github.io/p/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8Bk8s%E6%9F%A5%E8%AF%A2secret%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link><pubDate>Wed, 02 Mar 2022 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8Bk8s%E6%9F%A5%E8%AF%A2secret%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid><description>&lt;h2 id="k8s-secret">k8s secret
&lt;/h2>&lt;p>作为一个后端来Infra Team工作有一年了，总结一下目前我已知的获取k8s secret的方式，因为这个需求日常经常会用到&lt;/p>
&lt;h3 id="1-手动decode">1. 手动Decode
&lt;/h3>&lt;p>这最常见的方式，使用命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kubectl get secret testsecret -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后手动把base64编码后的字符串复制出来&lt;br>
再去执行&lt;code>echo xx | base64 -D&lt;/code>&lt;br>
这种应该是大部分使用k8s的开发人员最常用的方式。&lt;br>
缺点是中间有一段手动复制的操作，用上了鼠标，效率比较低，不够high level~&lt;/p>
&lt;h3 id="2-使用jsonpath">2. 使用jsonpath
&lt;/h3>&lt;p>这个其实是今天发现的，用&lt;code>jsonpath&lt;/code>可以一条命令里完成取secret的操作&lt;/p>
&lt;p>比如有下面的secret&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">kind: Secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apiVersion: v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> properties: ClJFRElTX0hPU1Q9ZGFhcy1yZWRpcy1iZD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> user.password: hcy1yZWy1yZWRpcyRpcy1iZDClJFRElTX0hPU1Q9ZGF
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个secret有两个值， 假如我们想取properties的信息,可以使用&lt;/p>
&lt;p>&lt;code>kubectl get secrets/testsecret -o jsonpath=&amp;quot;{.data.properties}&amp;quot; | base64 -D&lt;/code>&lt;/p>
&lt;p>jsonpath可以把对应需要的文本筛选出来，就很舒服&lt;/p>
&lt;p>另外, 假如key里面已经有了一个字符.应该怎么办？
可以使用:&lt;br>
&lt;code>kubectl get secrets/testsecret -o jsonpath=&amp;quot;{.data\.properties}&amp;quot; | base64 -D&lt;/code>&lt;/p>
&lt;h3 id="3-使用插件kubectl-view-secret">3. 使用插件kubectl view-secret
&lt;/h3>&lt;p>&lt;code>kubectl view-secret&lt;/code>是一个kubectl的插件，
安装之后可以直接通过kubectl view-secret命令看secret的内容，
github可以搜到，不多说了&lt;/p>
&lt;p>我身边很多同事在用这个插件，肯定是好用的&lt;/p>
&lt;h3 id="4安装lens">4.安装Lens
&lt;/h3>&lt;p>Lens是一个k8s可视化工具，可视化工具嘛，鼠标点点就出来了。&lt;br>
Lens对应查pod，查pod里的log什么的都挺方便的，懒人必备~&lt;/p>
&lt;p>综述，以上几种方式，我的推荐顺序是 &lt;code>3 &amp;gt; 4 = 2 &amp;gt; 1&lt;/code>&lt;/p>
&lt;p>kubectl view-secret装好后方便一些&lt;/p>
&lt;p>下班~！&lt;/p></description></item><item><title>我愿称之为史上最大的财富转移：养老金与年轻的供奉者</title><link>https://knowckx.github.io/p/the-pension-system-and-its-young-tributaries/</link><pubDate>Tue, 12 Aug 2025 17:21:56 +0800</pubDate><guid>https://knowckx.github.io/p/the-pension-system-and-its-young-tributaries/</guid><description>&lt;blockquote>
&lt;p>个人文章备份 -&amp;gt; &lt;a class="link" href="https://www.v2ex.com/t/1151888#reply0" target="_blank" rel="noopener"
>V2EX原帖&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>最近&amp;quot;全民社保&amp;quot;的事沸沸扬扬，这个问题我之前就关注了很久，这里想发表一下看法&lt;/p>
&lt;h3 id="历史背景">历史背景
&lt;/h3>&lt;p>在2014年之前，公务员和事业单位人员是不缴纳养老金的，个人账户是空的。&lt;br>
为了补偿这段“工龄”，国家出了一个规则，他们之前的工作年限被视为“视同缴费年限”。&lt;br>
这段长长的“视同缴费年限”是导致很多老人能拥有每月8千甚至1万+养老金的主要原因。
&lt;img src="https://knowckx.github.io/p/the-pension-system-and-its-young-tributaries/5p6uv09gabavs6umm50.jpg"
width="776"
height="914"
srcset="https://knowckx.github.io/p/the-pension-system-and-its-young-tributaries/5p6uv09gabavs6umm50_hu_3813d14f317c46d1.jpg 480w, https://knowckx.github.io/p/the-pension-system-and-its-young-tributaries/5p6uv09gabavs6umm50_hu_34392b3b120c092.jpg 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="203px"
>&lt;/p>
&lt;p>那么，因为“视同缴费年限”所导致的巨额资金缺口从哪里出？&lt;/p>
&lt;ul>
&lt;li>财政给补了一部分(而实际上财政的钱也是全民的)&lt;/li>
&lt;li>划转部分国有资本填入社保基金(“全民所有”的资产为历史缺口买单)&lt;/li>
&lt;li>还有大部分钱从目前参保者的&lt;code>统筹账户&lt;/code>里转移。&lt;/li>
&lt;/ul>
&lt;h3 id="老龄化的危机">老龄化的危机
&lt;/h3>&lt;p>这次事件的起因，就是因为现行的养老金随着少子化，会有一个巨大的收支窟窿&lt;br>
之前的10年，老人少，年轻人多，几个年轻人养一个老人，体系能运行。&lt;br>
但是未来年轻人会越来越少，老人越来越多，肯定运行不下去(参见社科院对2035年养老基金结余耗尽的预测&lt;/p>
&lt;p>所以，现行的养老金体系，在人口结构快速老化的背景下，表现出了类似‘庞氏游戏’的特征：&lt;/p>
&lt;blockquote>
&lt;p>非常依赖新增参保人来维持对退休者的转移支付。&lt;/p>&lt;/blockquote>
&lt;p>一旦新增不足，这个体系将面临巨大的支付压力甚至崩溃风险。&lt;br>
现在强制每个人都缴，可以扩大新增参保人数量，通过他们的统筹账户来修补收支窟窿，延缓体系崩溃的时间点。&lt;/p>
&lt;h3 id="支持者的解析">支持者的解析
&lt;/h3>&lt;p>然后为什么一些人支持&amp;quot;全面社保&amp;quot;的政策。这些人在我看来，主要分为两类:&lt;/p>
&lt;ol>
&lt;li>认知偏差。部分人特别是学生，或者工作没多久，其实并未花时间去深入了解现行养老金体系背后的历史问题和代际转移问题，更多地是从‘社会保障’和‘老年福祉’的宏大叙事出发的。&lt;/li>
&lt;li>利益相关。部分支持者本身是该制度的直接或间接受益者，他本人或者家庭成员目前享受着&lt;code>视同缴费&lt;/code>带来的较高退休金，ta有维护现有体系的天然立场。&lt;/li>
&lt;/ol>
&lt;h3 id="无法回避的五个问题">无法回避的五个问题
&lt;/h3>&lt;p>假如有人觉得现行养老金制度是公平的 可以来试着回答以下问题:&lt;/p>
&lt;ol>
&lt;li>为什么只强制社保，而不是在国内强制双休，强制加班必须给加班费？&lt;/li>
&lt;li>为什么社保账目不能公开透明化的，不受公众监督审查？&lt;br>
部分地区已经在对社保基金上下其手，讲不清资金去了哪。对养老金的具体分配遮遮掩掩。&lt;/li>
&lt;li>很多人退休之前因为意外发生了断缴，或者缴费不满15年(未来可能是20年)，那他的统筹账户里这么多钱，这块“香饽饽”去了哪？&lt;/li>
&lt;li>为什么社保明明是一种福利，但是又不能放弃。你见过&amp;quot;不能放弃&amp;quot;的&amp;quot;福利&amp;quot;吗？&lt;/li>
&lt;li>如果我们转向一个更透明、更公平的改革方向。使用完全的&lt;code>个人储蓄账户制度&lt;/code>（类似新加坡的公积金模式）&lt;br>
养老金缴费完全进入个人账户，权责清晰，多缴多得，外人也不能伸手进去乱摸。&lt;br>
请问全民社保还会被抵触缴纳吗？&lt;/li>
&lt;/ol></description></item><item><title>中国打工人的润学指南</title><link>https://knowckx.github.io/p/awesome-run/</link><pubDate>Sat, 09 Aug 2025 23:15:47 +0800</pubDate><guid>https://knowckx.github.io/p/awesome-run/</guid><description>&lt;p>最近这几天，我把常见的技术移民国家的政策情况，收集并整理了一下。&lt;br>
我觉得这些信息其他人应该也需要，所以干脆列了个表上传了github。&lt;br>
我的初心是尽量用最少的文字把各个国家和地区技术移民的关键信息展示出来。&lt;/p>
&lt;p>假如觉得有问题或者需要补充，请回帖告诉我
假如觉得有用，可以给个star&lt;/p>
&lt;p>github &lt;a class="link" href="https://github.com/Knowckx/awesome-run" target="_blank" rel="noopener"
>https://github.com/Knowckx/awesome-run&lt;/a>&lt;/p>
&lt;p>v2ex讨论 &lt;a class="link" href="https://www.v2ex.com/t/1151289" target="_blank" rel="noopener"
>https://www.v2ex.com/t/1151289&lt;/a>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>未曾设想的道路 - 中国打工人的润学指南&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>awesome-run&lt;/strong> 是一份为技术人才准备的全球机遇指南 &amp;amp; 移民攻略。&lt;br>
旨在为程序员这类技术人才，提供一个清晰、简洁、不断更新的各国（地区）永居与入籍路径对比。&lt;br>
通过标准化的表格，直观地展示关键信息，帮助你快速了解和比较不同选择。&lt;/p>
&lt;p>移民政策复杂且频繁变动，社区的力量是本项目保持活力的核心。&lt;br>
我们热切欢迎你的贡献！无论是修正一个错误、更新一项政策，还是增加一个新的国家，都请不要犹豫，通过 Pull Request 或 Issue 来分享你的知识。&lt;/p>
&lt;p>&lt;strong>免责声明&lt;/strong>：&lt;br>
本项目所有信息仅供参考，不构成任何法律或移民建议。在做出任何决定前，请务必查阅各国官方移民局网站，以获取最准确、最新的信息。&lt;/p>
&lt;h3 id="基础知识">基础知识
&lt;/h3>&lt;p>技术移民一般分为三个阶段&lt;/p>
&lt;ul>
&lt;li>工签，拿到工签后申请人就可以合法在这个国家工作，工签都没有那就是打黑工，查到会被送到小黑屋然后遣返&lt;/li>
&lt;li>PR(Permanent Resident), 也叫永居，绿卡。拥有后可以在这个国家自由居住，工作。
大部分权利和本国公民差不多，只是因为不能换护照，法理上你还是中国公民。&lt;br>
大部分国家的PR都有移民监，例如每5年需要在这个国家呆满2年，否则PR可能被取消。&lt;/li>
&lt;li>换国籍，完全成为那个国家的公民，可以换护照，从此你不再是中国公民了，而是&amp;quot;外籍华人&amp;quot;。&lt;/li>
&lt;/ul>
&lt;h3 id="技术移民的常见国家地区整理">技术移民的常见国家（地区）整理
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>国家/地区&lt;/th>
&lt;th>获取永久居留权（俗称绿卡，PR）&lt;/th>
&lt;th>移民监 - 保持永久居留&lt;/th>
&lt;th>获取国籍/护照&lt;/th>
&lt;th>公民身份福利&lt;/th>
&lt;th>双国籍&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>亚洲&lt;/td>
&lt;td>中国香港&lt;/td>
&lt;td>香港永久性居民身份&lt;br>需在香港工作生活满七年&lt;/td>
&lt;td>如果不是中国公民，且连续36个月或以上不在香港，可能会丧失永久居民身份。&lt;/td>
&lt;td>- 申请香港特区护照，要求是中国公民和拥有香港永久居民身份&lt;br>- 一个外国人可以同时持有原国籍+拥有香港永久性居民身份，但是无法申请香港护照&lt;/td>
&lt;td>香港永久性居民可以申请《港澳居民来往内地通行证》（俗称“回乡证”）到内地生活工作&lt;/td>
&lt;td>不承认&lt;br>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>日本&lt;/td>
&lt;td>永住者 PR&lt;br>- 常规路径，在日本连续居住10年&lt;br>- 高度人才签证，最快1年或3年后可申请PR&lt;br>- 审查纳税、社保缴纳情况及无犯罪记录&lt;/td>
&lt;td>- 每7年更新一次在留卡&lt;br>- 离开日本超过一年，需要办理“再入国许可”。&lt;/td>
&lt;td>归化&lt;br>- 在日本连续居住5年以上&lt;br>- 日语能力至少N3以上，需要和法务局官员进行面谈&lt;br>&lt;/td>
&lt;td>&lt;/td>
&lt;td>不承认&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>新加坡&lt;/td>
&lt;td>永久居民 (PR)&lt;br>- 持有工作准证(EP/SP)一段时间后申请&lt;br>- 审批不透明，没有明确的打分标准&lt;br>- 中国公民通常需要3到5年时间&lt;br>&lt;/td>
&lt;td>- 每5年续签一次再入境许可(REP)&lt;br>- 续签时移民局会评估与新加坡的联系情况，纳税、公积金CPF缴纳情况&lt;/td>
&lt;td>归化：&lt;br>- 成为PR后至少2年。&lt;br>- 同样为评估制。&lt;br>- 第二代男性公民有服役义务&lt;/td>
&lt;td>通过“H1B1签证”去美国工作&lt;/td>
&lt;td>不承认&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>大洋洲&lt;/td>
&lt;td>澳大利亚&lt;/td>
&lt;td>永久居民 (PR)&lt;br>- 根据技术移民打分制（189/190/491），准备好材料，提交EOI申请，进入池子里排队&lt;br>- 假如被移民局捞上了，他们发邀请，一步到位获得PR身份(甚至此时你从未登陆过澳洲，也没有澳洲的工作)&lt;br>- 竞争激烈。获邀的时间非常依赖职业和分数，从数月到数年不等；&lt;/td>
&lt;td>移民监: 每5年在澳洲住满2年&lt;/td>
&lt;td>- 持PR身份，过去4年内住满3年&lt;br>- 申请前1年住满9个月。&lt;br>- 通过公民考试（英语）&lt;/td>
&lt;td>1. 获得新西兰&amp;quot;准PR&amp;quot;，可以去新西兰生活和工作&lt;br>2. 可以去美国工作，专属的&amp;quot;E-3签证&amp;quot;&lt;/td>
&lt;td>承认&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>新西兰&lt;/td>
&lt;td>永久居民 (PRV)&lt;br>- 获得新西兰的全职offer(核心)&lt;br>- 技术移民打分(SMC)超过6分，申请居民签证&lt;br>- 持有居民签证，在新西兰居住工作2年以上可申请&lt;/td>
&lt;td>全球唯一永久绿卡&lt;br>回头签(PRV)是真正永久的，无任何居住要求，可无限期离境并随时返回。&lt;/td>
&lt;td>- 申请前5年内，每年都住满240天&lt;br>&lt;br>&lt;/td>
&lt;td>新西兰国籍可以去澳洲生活与工作&lt;/td>
&lt;td>承认&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>北美&lt;/td>
&lt;td>加拿大&lt;/td>
&lt;td>永久居民 (PR)&lt;br>- 通过联邦打分系统、省提名计划&lt;br>- 需要2年左右时间&lt;/td>
&lt;td>移民监: 每5年在加拿大住满至少2年&lt;/td>
&lt;td>- 已经是PR，并且过去5年内至少住满3年&lt;br>- 审查纳税记录&lt;br>- 通过语言和公民考试&lt;br>&lt;br>&lt;br>&lt;/td>
&lt;td>可以通过&amp;quot;TN签证&amp;quot;去美国工作&lt;/td>
&lt;td>承认&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>美国&lt;/td>
&lt;td>永久居民（绿卡, Green Card）&lt;br>- 典型路径：H1B抽签 -&amp;gt; 雇主支持办EB2/3排期&lt;br>- 不确定性很大，中国申请人排期通常很长&lt;/td>
&lt;td>- 离开美国超过6个月可能会受审查，&lt;br>超过1年则可能被视为放弃绿卡&lt;/td>
&lt;td>- 持有绿卡满5年&lt;br>- 这5年内在美实际居住30个月&lt;br>- 通过英语和公民知识考试&lt;/td>
&lt;td>&lt;/td>
&lt;td>承认&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>欧洲&lt;/td>
&lt;td>德国&lt;/td>
&lt;td>德国永居（PR）&lt;br>- 找到工作，持欧盟蓝卡 (EU Blue Card)登陆德国工作&lt;br>- 持蓝卡工作21个月（德语达到B1水平）或33个月（德语A1）&lt;br>注: 德语A1需要3~5个月左右&lt;br>&lt;/td>
&lt;td>- 不能连续离开德国超过6个月&lt;/td>
&lt;td>- 连续居住5年以上&lt;br>- 通过入籍考试&lt;br>- 要求德语水平B1以上&lt;br>&lt;/td>
&lt;td>欧盟区自由生活工作&lt;/td>
&lt;td>承认&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>爱尔兰&lt;/td>
&lt;td>可续签的长期居留许可 (Stamp 4)&lt;br>- 找到工作，申请关键技能就业许可(CSEP)&lt;br>- 持有CSEP工作2年，申请Stamp 4&lt;br>&lt;/td>
&lt;td>- Stamp 4 有效期为2年或5年&lt;br>- 续签时移民官会审查你与爱尔兰的联系紧密度&lt;/td>
&lt;td>入籍&lt;br>- 9年内累计住满5年&lt;br>- 申请前连续住满1年&lt;br>&lt;/td>
&lt;td>去英国工作生活&lt;/td>
&lt;td>承认&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>狐狸和鸡的故事</title><link>https://knowckx.github.io/p/the-fable-of-the-fox-and-the-chicken/</link><pubDate>Wed, 06 Aug 2025 16:22:29 +0800</pubDate><guid>https://knowckx.github.io/p/the-fable-of-the-fox-and-the-chicken/</guid><description>&lt;blockquote>
&lt;p>我始终认为，唤醒更多的人来关注我们社会中确实存在的问题，是有公共价值的。&lt;/p>&lt;/blockquote>
&lt;p>我在其他平台发的帖子可能会被删。所以在自己的blog里把文字留存一份。&lt;/p>
&lt;h2 id="正文">正文
&lt;/h2>&lt;p>🦊对🐔说：“你每个月给我5个鸡蛋🥚，我帮你存着。等你老了不能下蛋了，我再按月还你5个。”&lt;/p>
&lt;p>整个村的鸡，都开始给狐狸交蛋。&lt;/p>
&lt;p>狐狸呢，自己吃一些，再给家族里的亲戚送15个，手头紧了就卖掉一些过渡下，小日子过得那叫一个滋润。😎&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>🐔觉得自己过得太苦了，活得不明不白，干脆决定不生小鸡了。&lt;/p>
&lt;p>狐狸一看急了：”哎呀！你怎么能不生了呢？没有小鸡，鸡村的鸡岂不是越来越少了？“&lt;br>
它清了清嗓子宣布：“好消息！现在生一只小鸡🐣，奖励一个鸡蛋哦！”&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>又过了好多年，鸡终于老了，颤颤巍巍地去找狐狸要蛋。&lt;br>
狐狸慢悠悠地说：“哦，最近啊文件改了，领蛋的年龄推迟了，你再等几年吧。”📜&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>鸡没办法，又等了几年，它更老了，背都直不起来了。它再次找到狐狸。&lt;br>
这一次，狐狸给了它&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>&lt;strong>一个鸡蛋🥚。&lt;/strong>&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>你看，狐狸还是很有信用的，说给，就真的给了。&lt;/p></description></item><item><title>一个适合广深地区的副业思路</title><link>https://knowckx.github.io/p/sideline-idea-suitable-hk/</link><pubDate>Sun, 13 Jul 2025 11:12:34 +0800</pubDate><guid>https://knowckx.github.io/p/sideline-idea-suitable-hk/</guid><description>&lt;h2 id="副业代购的思路">副业代购的思路
&lt;/h2>&lt;p>最近在研究运动相机的参数时，发现的这个想法&lt;/p>
&lt;p>&lt;img src="https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-jd-price.jpg"
width="499"
height="435"
srcset="https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-jd-price_hu_4ee2b580b255bcd2.jpg 480w, https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-jd-price_hu_ee87b6a824d1bbcc.jpg 1024w"
loading="lazy"
alt="内地价格"
class="gallery-image"
data-flex-grow="114"
data-flex-basis="275px"
>&lt;/p>
&lt;p>大疆的&lt;code>Action4&lt;/code>相机是目前很热门的一款产品，&lt;br>
内地在国补后价格1500元以上，并且还不好抢。&lt;br>
这导致就连某鱼上二手准新机也能出到1500R&lt;/p>
&lt;!-- &lt;img src="hk-jd-price.jpg" alt="内地价格"/> -->
&lt;p>&lt;img src="https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-price.png"
width="1018"
height="499"
srcset="https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-price_hu_9fb440680f073937.png 480w, https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-price_hu_dc2e7808963a9ee1.png 1024w"
loading="lazy"
alt="香港官方的价格"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="489px"
>&lt;/p>
&lt;p>目前香港的大疆官方店，行货价格在1389港币，换算成RMB大概是1268元，&lt;br>
单台差价的232元，利润率 232/1268 = 18.3%&lt;/p>
&lt;p>&lt;img src="https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-cny.png"
width="584"
height="398"
srcset="https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-cny_hu_28b1d8fc4264166b.png 480w, https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-cny_hu_e157901afc410cbf.png 1024w"
loading="lazy"
alt="目前汇率"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;p>关键点来了，内地的居民去香港，每间隔15天就能获得12000的免税额，&lt;br>
按每个月去两次HK来算，一共是24000的免税额， &lt;br>
全部利用上可以获得24000*0.183 = 4392的利润空间&lt;/p>
&lt;p>&lt;img src="https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-Snipaste_view343.png"
width="992"
height="400"
srcset="https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-Snipaste_view343_hu_984d7a12a615176d.png 480w, https://knowckx.github.io/p/sideline-idea-suitable-hk/hk-Snipaste_view343_hu_239219e399e04c58.png 1024w"
loading="lazy"
alt="免税额规定"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;p>Plus: 这里还没算上很多&lt;code>万事达/Visa的信用卡&lt;/code>对境外消费有返现奖励 &lt;br>
延伸: 我相信还有很多其他的产品拥有值得考虑的差价，只是没有去收集&lt;/p>
&lt;p>假设一个广深的打工人，周末的时候去香港玩，利用好免税额的规定，&lt;br>
随便采购点东西卖卖，还是能回血不少。&lt;/p>
&lt;p>所以把这个作为一个副业，一个月只需要做两天，收入保底4000+，还是不错的。&lt;/p></description></item><item><title>发现一个有意思的天气网站</title><link>https://knowckx.github.io/p/website-app-share/</link><pubDate>Sun, 06 Jul 2025 11:12:34 +0800</pubDate><guid>https://knowckx.github.io/p/website-app-share/</guid><description>&lt;h2 id="天气地图">天气地图
&lt;/h2>&lt;ul>
&lt;li>可以直观地看到不同地区的&lt;strong>气温&lt;/strong>，&lt;strong>降水&lt;/strong>，&lt;strong>台风&lt;/strong>等&lt;/li>
&lt;li>支持国外地区&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://knowckx.github.io/p/website-app-share/zoom.earth-pic1.png"
width="1041"
height="731"
srcset="https://knowckx.github.io/p/website-app-share/zoom.earth-pic1_hu_de26a2788bed18b6.png 480w, https://knowckx.github.io/p/website-app-share/zoom.earth-pic1_hu_581ef46abfae09be.png 1024w"
loading="lazy"
alt="效果"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="341px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://zoom.earth/maps/temperature/#view=31.28,108.63,5z/model=icon" target="_blank" rel="noopener"
>ZoomEarth传送门&lt;/a>&lt;/p>
&lt;p>Tips: 需要科学上网&lt;/p></description></item><item><title>第四罗马帝国 我们的海 (Mare Nostrum)</title><link>https://knowckx.github.io/p/rebuild-mare-nostrum/</link><pubDate>Fri, 02 May 2025 11:12:34 +0800</pubDate><guid>https://knowckx.github.io/p/rebuild-mare-nostrum/</guid><description>&lt;p>注: 从现代国情和政治格局出发，架空历史，描述意大利重建罗马的幻想历史故事。&lt;br>
&lt;del>作为一个P社游戏玩家的基础操作&lt;/del>&lt;/p>
&lt;h2 id="第一阶段地中海的新文艺复兴-2025-2035">第一阶段：地中海的“新文艺复兴” (2025-2035)
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>起点 - 危机与不满：&lt;/strong> 2020年代末，意大利深陷多重困境：持续的经济疲软、高额的国家债务、南北发展不平衡、以及作为地中海前线国家承受的巨大移民压力。欧盟内部的争吵和援助的不足，让许多意大利人感到被边缘化和背叛。国家自豪感低落，社会弥漫着对现状的强烈不满。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>“罗马遗产”运动兴起：&lt;/strong> 一个极具魅力的民族主义政治家和他的政党登上了历史的舞台。他们不再仅仅谈论经济或移民，而是唤醒深埋在意大利文化中的“罗马情结”。他们宣扬一种“新罗马主义”（Neo-Romanesimo），声称意大利民族是古罗马的正统继承者，有责任重振罗马精神，恢复意大利在地中海乃至世界的“应有地位”。他们将当前的困境归咎于“日耳曼-法兰克主导的欧洲”的压制和“盎格鲁-撒克逊文化”的侵蚀。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>军事“正常化”：&lt;/strong> 以“保护国家利益”、“维护地中海航运安全”和“有效管理人道主义危机”为名，新上台的强硬政府开始大规模投资军事力量，特别是海军和快速反应部队。这最初被许多国内外观察家解读为应对现实威胁的“正常”反应。然而，军队内部开始清洗“不可靠”的将领，并秘密灌输“新罗马主义”思想，强调进攻性和“收复我们的失地”（Recupero）的理念。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文化与宣传攻势：&lt;/strong> 政府大力赞助与古罗马历史相关的文化项目、电影、教育，强烈的民族主义和扩张主义思维在民间传播。古罗马的武功、秩序和“文明使命”被无限拔高，SPQR（元老院与罗马人民）的标志被重新设计并广泛使用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="第二阶段重塑我们的海mare-nostrum-2035-2045">第二阶段：重塑“我们的海”（Mare Nostrum） (2035-2045)
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>经济与外交施压：&lt;/strong> 意大利利用其地理位置和日益增长的军事存在，开始对地中海沿岸较弱的国家施加影响。首先是利比亚（借口稳定局势，实则控制石油资源和海岸线）、阿尔巴尼亚（利用历史联系和经济渗透）、突尼斯（以打击极端主义和控制移民为名）。意大利通过提供“安全保障”和经济援助，换取这些国家的港口使用权、资源开采权，并扶植亲意政权。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>“蓝色扩张”：&lt;/strong> 意大利海军以打击海盗、走私和“恐怖主义威胁”为由，在地中海上建立起事实上的霸权。意大利主导并设立了“地中海联合巡逻区”，强制推行自己的规则，并开始干预他国（如希腊、马耳他）的领海争端，处处以“罗马秩序的维护者”自居。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>与欧盟/北约的决裂：&lt;/strong> 意大利的种种扩张倾向行为日益挑战欧盟的共同外交与安全政策以及北约的框架。面对国际社会的批评和制裁威胁，意大利政府煽动国内民粹情绪，宣称这是“嫉妒者对罗马复兴的阻挠”，并逐步退出或架空这些国际组织对其的约束。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="第三阶段鹰旗的征服-2045-2055">第三阶段：鹰旗的征服 (2045-2055)
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>“统一战争”的打响：&lt;/strong> 当外交和经济手段达到极限时，意大利开始动用武力。目标是那些被视为“古罗马失地”且具有战略意义的区域：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>北非：&lt;/strong> 对利比亚、突尼斯和埃及部分沿海地区发动全面军事行动，宣布要重建罗马的阿非利加行省。&lt;/li>
&lt;li>&lt;strong>巴尔干西岸：&lt;/strong> 进攻克罗地亚的达尔马提亚海岸、阿尔巴尼亚全境、染指希腊西部，试图恢复罗马对伊利里亚和希腊部分地区的控制。&lt;/li>
&lt;li>&lt;strong>地中海岛屿：&lt;/strong> 对马耳他、塞浦路斯（与土耳其和希腊冲突）提出主权要求并发动突袭。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>军团再临：&lt;/strong> 新的意大利军队采用现代化装备，战术和番号模仿古罗马军团。战争手段残酷无情，强调快速推进和彻底摧毁抵抗意志。占领区实行军事管制，压制当地文化，强制推行意大利语和“罗马化”政策。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>孤立与核讹诈：&lt;/strong> 意大利的侵略行为使其在国际上空前孤立。为了自保并威慑大国干预，意大利不惜代价秘密研发获取核武器，连续的核爆实验成功加上新型的洲际导弹技术，这将成为维持“新罗马帝国”的终极手段。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="第四阶段地中海惊雷-2055-2056">第四阶段：地中海惊雷 (2055-2056)
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>惊悚与恐惧：&lt;/strong> 意大利在地中海和北非的种种扩张行为引起了英法两国极大的警惕，两国联合其他欧洲国家对意大利进行外交警告与经济制裁。2055年，军事动员完毕的意大利开始公开声称科西嘉岛自古以来属于罗马共和国的领土，法国应当归还科西嘉岛的主权。这次对法国领土的索取，直接越过了法国的红线，彻底结束了两国在外交上解决争端的可能性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>英法联盟：&lt;/strong> 英法两国不顾国内部分绥靖声音，组建了海军联合特遣舰队，决心以武力“遏制新罗马的野心”，保护其在地中海的战略利益（苏伊士航线、科西嘉和马耳他的安全）。然而，时代变了。西方世界的传统领袖:美国，正深陷自身的经济危机、极端政治内耗和社会意见分裂的泥潭，加上奉行彻底的“新孤立主义”政策，明确表示不会介入“欧洲内部的过时冲突”，将战略重心完全置于太平洋和国内事务。美国的缺席，极大地改变了力量平衡。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>决战“我们的海”：&lt;/strong> 意大利等待的就是这个机会。凭借数十年精心准备、高度适应地中海环境、被“新罗马主义”精神浸透到骨髓的士兵，并且还秘密装备了不对称的“杀手锏”武器:超高音速反舰导弹集群、先进水下无人作战系统和强大的区域拒止电子战能力。&lt;br>
意大利在地中海中部和西西里海峡附近与英法联军爆发了一系列惨烈的海空大战。意大利海军利用本土作战和技术突袭的优势，重创了准备不足、协调不畅并且缺乏美国情报与后勤支持的英法舰队。其中关键性的胜利——在一场混乱的近海战斗中，意大利海军在陆基航空兵的支援下，通过超高音速反舰导弹集群的饱和攻击，连续击沉了英法特遣舰队三艘航母和多条大型驱逐舰，重创了特遣舰队的主力，震惊了世界。&lt;br>
英法两国国内厌战情绪爆发，面对巨大的损失和美国袖手旁观的现实，被迫接受了屈辱的停战协议，承认意大利在地中海拥有支配的地位。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="第五阶段罗马的再临-2056-2060">第五阶段：罗马的再临 (2056-2060)
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>罗马的狂热：&lt;/strong> 曾经，古罗马击败了迦太基强大的海军。2000多年后，意大利再一次战胜了欧洲最强大的海军舰队。战胜昔日的海上霸主和欧洲强权的消息传回意大利之时，引发了史无前例的民族主义狂热。那位独裁领袖被捧上了神坛，被誉为“当代凯撒”、“海洋征服者”。宣传机器全力开动，将这场胜利描绘成正义战胜堕落、拉丁精神压倒日耳曼-盎格鲁传统的伟大复兴，是罗马雄鹰在沉寂两千年后再次翱翔于天际。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>万神殿前的加冕：&lt;/strong> 在这场代价高昂的胜利之后不久，这位权势达到顶峰的独裁者，选择在罗马，在修复一新的万神殿前，在能俯瞰古罗马广场的帕拉丁山上，举行一场规模空前、融合了古罗马仪式与现代军事元素的加冕典礼。不再满足于“领袖”（Duce）或“总统”的头衔，他要的是那个至高无上的名号: &lt;strong>凯撒（Caesar）&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>“第四罗马帝国”的宣告：&lt;/strong> 在万千狂热民众的山呼海啸中，在身着仿古军服、手持鹰旗的“新罗马军团”护卫下，这位领袖发表了激动人心的演说。他历数意大利（罗马）的“屈辱”历史，颂扬新政权的“丰功伟绩”，痛斥英法的“腐朽”与美国的“背信弃义”，最终，他庄严宣告：“两千年的等待已经结束！今天，在诸神与先祖的见证下，凭借我们军团不可战胜的力量和意大利人民不屈的意志，&lt;strong>罗马帝国，永恒的帝国，再次重生&lt;/strong>！&lt;strong>我，将以凯撒之名，引领我们的人民，重建地中海的秩序，光复罗马应有的荣耀&lt;/strong>！”&lt;br>
天空被战机划破，广场上是钢铁洪流般的阅兵。无数手臂狂热地伸向前方，爆发出震耳欲聋的呼喊：“&lt;strong>凯撒！凯撒！凯撒！&lt;/strong>”。&lt;br>
古罗马的雄鹰旗帜再次飘扬在地中海上空，罗马的时代，再次来临。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>联想笔记本Fn+Ctrl键会唤醒cortana的问题</title><link>https://knowckx.github.io/p/disabling-fn-ctrl-lenovo-laptops/</link><pubDate>Wed, 30 Apr 2025 12:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/disabling-fn-ctrl-lenovo-laptops/</guid><description>&lt;h1 id="场景-ctrlfn唤醒小娜的问题">场景: Ctrl+Fn唤醒小娜的问题
&lt;/h1>&lt;p>联想的笔记本，按住键盘上的&lt;code>Ctrl+Fn&lt;/code>后，会尝试唤醒&lt;code>微软小娜&lt;/code>。&lt;br>
假如你的电脑已经卸载了小娜，那么就会出现一个弹窗，提示:&lt;/p>
&lt;blockquote>
&lt;p>需要使用新应用以打开此ms cortana2&lt;/p>&lt;/blockquote>
&lt;p>这是因为小娜卸载后，他找不到这个应用，引导你去windows的应用商店下载。&lt;/p>
&lt;h1 id="解决方案">解决方案
&lt;/h1>&lt;p>这个问题很烦人，所以我花了1小时多搜了一圈资料，找到了解决方案。&lt;/p>
&lt;p>有两个方式可以解决，可以试一下:&lt;/p>
&lt;p>&lt;strong>方案1 直接卸载&lt;code>Lenovo Hotkeys&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>Lenovo Hotkeys&lt;/code>是联想的一个应用，可以从win10商店里下载。 &lt;br>
这个应用管理了Fn键的效果，还有开启大小写键的面板提示，开启&lt;code>NumLock&lt;/code>键的面板提示。&lt;/p>
&lt;p>卸载:&lt;br>
进入Windows设置（快捷键: Win+I）&amp;gt; 应用 &amp;gt; 搜索:&lt;code>联想快捷键&lt;/code> 或者 &lt;code>Lenovo Hotkeys&lt;/code> &amp;gt; 卸载&lt;/p>
&lt;p>&lt;strong>方案2 关闭对应联想的服务&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>快捷键&lt;code>Win+S&lt;/code>, 输入&lt;code>服务&lt;/code>, 打开Win的&lt;code>服务&lt;/code>窗口&lt;/li>
&lt;li>在服务里找&lt;code>Lenovo Function and Fn Key Service&lt;/code>。&lt;/li>
&lt;li>右键属性 -&amp;gt; 点击&lt;code>停用&lt;/code> 然后启动类型改成&lt;code>禁止&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>此时应该 &lt;code>Ctrl+Fn&lt;/code> 不会触发了。测试后重启电脑再次确定一下。&lt;/p>
&lt;h1 id="禁用后的好处">禁用后的好处:
&lt;/h1>&lt;p>解放了Home键和End键。 在编辑长文件时，可以试下这两个快捷键:&lt;/p>
&lt;p>快捷键&lt;kbd>Ctrl&lt;/kbd> + &lt;kbd>Fn&lt;/kbd> + &lt;kbd>左箭头&lt;/kbd> -&amp;gt; 实现跳转到文件顶部（Home键功能）&lt;/p>
&lt;p>快捷键&lt;kbd>Ctrl&lt;/kbd> + &lt;kbd>Fn&lt;/kbd> + &lt;kbd>右箭头&lt;/kbd> -&amp;gt; 实现跳转到文件末尾（End键功能）&lt;/p>
&lt;hr>
&lt;h1 id="备注联想的fn键的其他效果">备注:联想的Fn键的其他效果
&lt;/h1>&lt;p>Fn+空格  控制键盘背光&lt;/p>
&lt;p>Fn+M 启用/禁用触摸板&lt;/p>
&lt;p>Fn+Q 不同操作模式间切换（节能、性能、智能）&lt;/p>
&lt;p>Fn+Esc 开启和关闭Fn&lt;/p></description></item><item><title>为Terminal设置代理</title><link>https://knowckx.github.io/p/%E4%B8%BAterminal%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</link><pubDate>Thu, 05 Dec 2024 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E4%B8%BAterminal%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</guid><description>&lt;p>Mac在终端下通过设置环境变量来配置代理，Linux的终端也是一样，这里记录一下。&lt;/p>
&lt;p>打开你的代理软件，我用的是ClashX.&lt;br>
找到软件的代理端口，我这边http和socks5都是7890&lt;/p>
&lt;p>终端里输入:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">https_proxy&lt;/span>&lt;span class="o">=&lt;/span>http://127.0.0.1:7890 &lt;span class="nv">http_proxy&lt;/span>&lt;span class="o">=&lt;/span>http://127.0.0.1:7890 &lt;span class="nv">all_proxy&lt;/span>&lt;span class="o">=&lt;/span>socks5://127.0.0.1:7890
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置好代理后，对该终端下执行的二进制都会生效，比如golang开发中的go get&lt;/p>
&lt;p>设置好之后可以用&lt;strong>curl&lt;/strong>测试一下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl google.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 输出HTML&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;content-type&amp;#34;&lt;/span> &lt;span class="nv">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;text/html;charset=utf-8&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;TITLE&amp;gt;301 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;H1&amp;gt;301 Moved&amp;lt;/H1&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The document has moved
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;A &lt;span class="nv">HREF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://www.google.com/&amp;#34;&lt;/span>&amp;gt;here&amp;lt;/A&amp;gt;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>魔兽世界WLK 各职业驱散能力表</title><link>https://knowckx.github.io/p/wow-wlk-dispel-skills/</link><pubDate>Wed, 16 Oct 2024 12:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/wow-wlk-dispel-skills/</guid><description>&lt;p>最近迷上了魔兽世界的PVP，还是打JJC和战场比下副本有意思多了。&lt;/p>
&lt;p>因为魔兽世界的效果类型太多了，在这里归纳一下各职业的驱散能力，方便查询&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>牧师&lt;/th>
&lt;th>萨满&lt;/th>
&lt;th>骑士&lt;/th>
&lt;th>德鲁伊&lt;/th>
&lt;th>法师&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>魔法&lt;/td>
&lt;td>进攻驱散+防御驱散&lt;/td>
&lt;td>仅进攻驱散&lt;/td>
&lt;td>仅防御驱散&lt;/td>
&lt;td>-&lt;/td>
&lt;td>进攻驱散(法术偷取)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>疾病&lt;/td>
&lt;td>可以解&lt;/td>
&lt;td>可以解&lt;/td>
&lt;td>可以解&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>毒&lt;/td>
&lt;td>仅限神牧&lt;/td>
&lt;td>可以解&lt;/td>
&lt;td>可以解&lt;/td>
&lt;td>可以解&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>诅咒&lt;/td>
&lt;td>-&lt;/td>
&lt;td>仅限奶萨&lt;/td>
&lt;td>-&lt;/td>
&lt;td>可以解&lt;/td>
&lt;td>可以解&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>拥有部分驱散能力的职业&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>猎人的&lt;code>宁神射击&lt;/code>的可以实现一次进攻驱散并且同时去除激怒效果，但是这个技能有8秒的冷却时间&lt;/li>
&lt;li>术士的宠物&lt;code>地狱猎犬&lt;/code>，可以实现进攻驱散/防御驱散，8秒的冷却时间&lt;/li>
&lt;li>防战的&lt;code>盾牌猛击&lt;/code>，有50%机会驱散一个魔法效果，6秒的冷却时间&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>魔法效果细节&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>进攻驱散&lt;/code>是指解除敌人身上的增益魔法效果，&lt;code>防御驱散&lt;/code>是指解除队友和自己身上的不利魔法效果&lt;/li>
&lt;li>牧师的驱散技能分为大驱和小驱，牧师的&lt;code>大驱&lt;/code>可以驱散法师的冰箱，骑士的无敌(圣盾术)&lt;/li>
&lt;li>战士在80级增加的&lt;code>碎裂投掷&lt;/code>可以进攻驱散法师的冰箱，骑士的无敌&lt;/li>
&lt;li>骑士给队友加的&lt;code>保护之手&lt;/code>(免疫一切物理伤害)是一种魔法效果，可以被进攻驱散掉，也可以被法术偷取&lt;/li>
&lt;li>有很多重要的技能都是魔法效果，比如猎人的急速射击， 萨满变狼，都可以被驱散&lt;/li>
&lt;/ul></description></item><item><title>魔兽世界WLK 常见的抗性与法术穿透</title><link>https://knowckx.github.io/p/wow-wlk-spell-resistance-spell-penetration/</link><pubDate>Mon, 02 Sep 2024 12:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/wow-wlk-spell-resistance-spell-penetration/</guid><description>&lt;p>收集一下WLK PVP中常见的抗性相关知识，假如有什么不对的地方可以提醒我修改&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>骑士&lt;/th>
&lt;th>萨满&lt;/th>
&lt;th>猎人&lt;/th>
&lt;th>牧师&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>火焰抗性&lt;/td>
&lt;td>火抗光环 +130抗性&lt;/td>
&lt;td>火抗图腾 +130抗性&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>自然抗性&lt;/td>
&lt;td>-&lt;/td>
&lt;td>自然抗图腾 +130抗性&lt;/td>
&lt;td>野性守护 +130抗性&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>冰霜抗性&lt;/td>
&lt;td>冰抗光环 +130抗性&lt;/td>
&lt;td>冰抗图腾 +130抗性&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>暗影抗性&lt;/td>
&lt;td>暗抗光环 +130抗性&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>暗影防护 暗抗+130&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol>
&lt;li>法术穿透是一个纯PVP属性， 在PVE中0价值。&lt;/li>
&lt;li>各职业的抗性效果无法叠加，取最高值&lt;br>
PVE中骑士开了火抗光环，萨满就不需要插火抗图腾了&lt;/li>
&lt;li>99%的场合，PVP中法穿堆到&lt;code>130&lt;/code>就够用了。 假如法穿不够会出现技能被抵抗/减伤&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>常见的全属性抗性有两种:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>德鲁伊的爪子可以增加全抗性54点，天赋加成后增加全抗性76点，因此PVP中法系职业法穿最低要求&lt;code>75&lt;/code>点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>法师的奥术第二层天赋&amp;quot;魔法吸收&amp;quot;可以增加80点全抗性，同时可以叠加&lt;strong>法师护甲&lt;/strong>技能40点全抗性，&lt;br>
你在战场或者JJC中遇到的法师大部分会有&lt;code>120&lt;/code>点全抗性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>职业伤害类型细节&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>骑士和牧师都可以为队友提供130点的暗影抗性，邪DK/暗牧/SS有大量的伤害属于暗影伤害，所以这些职业需要至少堆法穿&lt;code>130&lt;/code>&lt;/li>
&lt;li>元素萨的主要伤害类型是火焰伤害和自然伤害&lt;/li>
&lt;li>生存猎有大量的伤害是火焰伤害(你可以用火抗对抗生存猎)&lt;/li>
&lt;li>盗贼的毒药伤害是一种自然伤害，可以被自然抗性减少伤害&lt;/li>
&lt;li>鸟德的伤害类型是奥术和自然伤害&lt;/li>
&lt;li>毁灭术的主要伤害类型是火焰&lt;/li>
&lt;/ul></description></item><item><title>selenium设置Chrome忽略https证书</title><link>https://knowckx.github.io/p/selenium%E8%AE%BE%E7%BD%AEchrome%E5%BF%BD%E7%95%A5https%E8%AF%81%E4%B9%A6/</link><pubDate>Sun, 05 May 2024 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/selenium%E8%AE%BE%E7%BD%AEchrome%E5%BF%BD%E7%95%A5https%E8%AF%81%E4%B9%A6/</guid><description>&lt;p>最近在用&lt;code>selenium&lt;/code>写一个内部站点的自动化工具，自动填资料注册账号然后激活啥的。&lt;/p>
&lt;p>可我们这个站点有时候证书会签不出来，这会导致Chrome连接时出现TLS安全检查的Warning。&lt;/p>
&lt;p>虽然证书是有问题的，但是我们还想要继续访问，因此要设置忽略https的TLS检查。&lt;br>
然后我在网上搜这部分的配置，网上的示例全是JAVA的，&lt;br>
我这边用的golang的API，各种文档找了&lt;code>1个小时&lt;/code>，最终跑起来了。&lt;/p>
&lt;p>代码很简单，但是想把代码片段留一下，希望可以帮助需要的人节约一点小小的时间，不要重复浪费我这一小时&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 忽略TLS检查&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">SetClientIgnoreTls&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">selenium&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WebDriver&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">caps&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">selenium&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Capabilities&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;browserName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;chrome&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prefs&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;acceptInsecureCerts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">chromeCaps&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">chrome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Capabilities&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Prefs&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">prefs&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Path&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;--ignore-certificate-errors&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">caps&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddChrome&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chromeCaps&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">remoteAddr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;127.0.0.1:9515&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">selenium&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewRemote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">caps&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">remoteAddr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>mysql模拟开窗函数</title><link>https://knowckx.github.io/p/mysql%E6%A8%A1%E6%8B%9F%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/</link><pubDate>Fri, 26 Jan 2024 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/mysql%E6%A8%A1%E6%8B%9F%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/</guid><description>&lt;p>今天写一个SQL时需要使用&lt;em>开窗函数&lt;/em>，结果发现Mysql在8.0后才开始支持CTE和开窗函数.&lt;/p>
&lt;p>我们目前所使用的Mysql版本比较低，所以想了一种通过子查询来模拟的方法， 记录一下。&lt;/p>
&lt;p>举个例子：&lt;/p>
&lt;p>现在有一张普通的表 table_age，只有三列：ID, name, age.&lt;/p>
&lt;p>现在想让查询结果的每一行都带上年龄的总和，也就是实现类似开窗函数的效果&lt;/p>
&lt;p>在Mysql 8.0之后 直接用开窗函数就行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OVER&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;总年龄&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">table_age&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">table_age&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在Mysql 8.0之前， 可以像下面这样写：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tempT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">totalAge&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;总年龄&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">table_age&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">table_age&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;totalAge&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tempT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其他开窗函数也可以用这样子查询的方法，去模拟实现。&lt;/p></description></item><item><title>hugo的lastmod更新问题</title><link>https://knowckx.github.io/p/hugo-lastmod-update/</link><pubDate>Wed, 29 Nov 2023 17:12:34 +0800</pubDate><guid>https://knowckx.github.io/p/hugo-lastmod-update/</guid><description>&lt;h2 id="背景">背景
&lt;/h2>&lt;p>最近我改了几篇旧文章之后，发现google没有对我的&lt;code>更新内容&lt;/code>进行及时收录&lt;br>
我查了一下原因，发现hugo自动生成的&lt;code>sitemap.xml&lt;/code>里，&lt;br>
对于我手动更新了内容的那篇文章，他的&lt;code>lastmod&lt;/code>并没有变化。&lt;/p>
&lt;h2 id="关于lastmod字段">关于lastmod字段
&lt;/h2>&lt;p>lastmod字段的作用，是告诉搜索引擎的&lt;code>爬虫&lt;/code>，这个页面最后的修改时间。&lt;br>
假如你的页面实际内容改了，但是这个值没有更新，就会导致爬虫判断这个页面没有改动 &lt;br>
这就导致了搜索引擎没有及时收录你这次的改动(其实最终会收录，但是时间会很久)&lt;/p>
&lt;h2 id="hugo的lastmod时间">hugo的lastmod时间
&lt;/h2>&lt;p>Hugo在生成&lt;code>sitemap&lt;/code>时，确定&lt;lastmod>值有一个顺序，优先级从高到低：&lt;/p>
&lt;ol>
&lt;li>文章头部&lt;code>Front Matter&lt;/code>里手动指定的&lt;code>lastmod&lt;/code>字段&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Yaml" data-lang="Yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;我的文章&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">date&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2023-01-01T10:00:00&lt;/span>&lt;span class="m">+08&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">lastmod&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2024-03-15T14:30:00&lt;/span>&lt;span class="m">+08&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Hugo会用这个&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>文章头部&lt;code>Front Matter&lt;/code>里指定的&lt;code>publishDate&lt;/code>字段&lt;br>
如果找不到 lastmod，Hugo会查找 publishDate&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文章头部&lt;code>Front Matter&lt;/code>里指定的&lt;code>date&lt;/code>字段&lt;br>
如果以上两者都没有，Hugo会使用 date 参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Git 提交信息 (如果 配置项里&lt;code>enableGitInfo&lt;/code> 为 true)：&lt;br>
如果你的项目是一个Git仓库，并且你在Hugo的配置文件 (hugo.toml 或 config.toml) 中设置了 enableGitInfo = true，&lt;br>
Hugo会尝试使用最后一次影响该文件的Git提交的作者日期 (author date) 作为 lastmod。这通常是最准确的自动方式。
&lt;code>:git&lt;/code> 从文件的 git 提交记录获取&lt;br>
好像和CI有联系&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文件系统修改时间 (Fallback)：&lt;br>
如果以上都不可用，它可能会尝试使用文件的实际修改时间，但这个显然在跨系统或CI/CD环境中不可靠。
&amp;lsquo;:fileModTime&amp;rsquo;
我测试了下，在&lt;code>CI模式&lt;/code>下，这个值会把&lt;strong>所有文章&lt;/strong>的&lt;code>lastmod&lt;/code>改成最近这次CI执行时间&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="最后解决方案">最后解决方案
&lt;/h2>&lt;p>方式1 使用git记录的文件修改时间 -&amp;gt; &lt;strong>推荐！&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># config.toml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">enableGitInfo&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="c"># 启用GitInfo支持&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">frontmatter&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastmod&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;lastmod&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;modified&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;:git&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;:fileModTime&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;date&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c"># 按顺序依次获取&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://gohugo.io/configuration/front-matter/" target="_blank" rel="noopener"
>具体的配置解释参考&lt;/a>&lt;/p></description></item><item><title>Hugo的Markdown语法示例</title><link>https://knowckx.github.io/p/hugo-markdown/</link><pubDate>Mon, 21 Aug 2023 12:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/hugo-markdown/</guid><description>&lt;h2 id="各级标题">各级标题
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># H1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">## H2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### H3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="文字效果">文字效果
&lt;/h2>&lt;h3 id="斜体--加粗">斜体 + 加粗
&lt;/h3>&lt;p>这是&lt;em>文字斜体&lt;/em>效果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">这是*文字斜体*效果
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是&lt;strong>文字加粗&lt;/strong>效果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">这是**文字加粗**效果
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="删除线--下划线">删除线 + 下划线
&lt;/h3>&lt;p>这是一段&lt;del>加了删除线的文本&lt;/del>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">这是一段~加了删除线的文本~
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是一段&lt;u> 下划线示例文本 &lt;/u>内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">这是一段&amp;lt;u&amp;gt; 下划线示例文本 &amp;lt;/u&amp;gt;内容
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="高亮">高亮
&lt;/h3>&lt;p>Most &lt;mark>salamanders&lt;/mark> are nocturnal&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Most &amp;lt;mark&amp;gt;salamanders&amp;lt;/mark&amp;gt; are nocturnal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>别的编辑器可以用&amp;quot;&lt;code>==高亮文本==&lt;/code>&amp;ldquo;来实现高亮，hugo好像不行&lt;/li>
&lt;/ul>
&lt;h3 id="超链接">超链接
&lt;/h3>&lt;p>&lt;a class="link" href="http://www.baidu.com" target="_blank" rel="noopener"
>百度一下，你就知道&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[百度一下，你就知道](http://www.baidu.com)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="拓展标记">拓展标记
&lt;/h2>&lt;h3 id="键盘按键">键盘按键
&lt;/h3>&lt;p>&lt;kbd>Ctrl&lt;/kbd> + &lt;kbd>X&lt;/kbd>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;kbd&amp;gt;Ctrl&amp;lt;/kbd&amp;gt; + &amp;lt;kbd&amp;gt;X&amp;lt;/kbd&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="上下标">上下标
&lt;/h3>&lt;p>下标 H&lt;sub>2&lt;/sub>O&lt;/p>
&lt;p>上标 X&lt;sup>n&lt;/sup> + Y&lt;sup>n&lt;/sup> = Z&lt;sup>n&lt;/sup>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">下标 H&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;O
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">上标 X&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt; + Y&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt; = Z&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="引用">引用
&lt;/h2>&lt;h3 id="块内引用">块内引用
&lt;/h3>&lt;p>这是&lt;code>块内引用&lt;/code>效果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">这是`块内引用`效果
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="区块引用">区块引用
&lt;/h3>&lt;blockquote>
&lt;p>这是区块引用的效果&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt; 这是区块引用的效果
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="代码块">代码块
&lt;/h3>&lt;p>缩进推荐四个空格&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>A paragraph&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="列表">列表
&lt;/h2>&lt;h3 id="有序列表">有序列表
&lt;/h3>&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h3 id="无序列表">无序列表
&lt;/h3>&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h3 id="多级列表">多级列表
&lt;/h3>&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">* Fruit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * Apple
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * Orange
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * Banana
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="图片">图片
&lt;/h2>&lt;ul>
&lt;li>图片需要放在和&lt;code>.md&lt;/code>文件同一个文件夹里&lt;/li>
&lt;li>hugo一行可以引用多个图片，支持横排图片&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://knowckx.github.io/p/hugo-markdown/1.jpg"
width="2000"
height="1400"
srcset="https://knowckx.github.io/p/hugo-markdown/1_hu_811b671457ffff1f.jpg 480w, https://knowckx.github.io/p/hugo-markdown/1_hu_c74af69dd7c1dcda.jpg 1024w"
loading="lazy"
alt="Image 1"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
> &lt;img src="https://knowckx.github.io/p/hugo-markdown/2.jpg"
width="1500"
height="2250"
srcset="https://knowckx.github.io/p/hugo-markdown/2_hu_42f6436cb1637265.jpg 480w, https://knowckx.github.io/p/hugo-markdown/2_hu_27862a49608da0d9.jpg 1024w"
loading="lazy"
alt="Image 2"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">![&lt;span class="nt">Image 1&lt;/span>](&lt;span class="na">1.jpg&lt;/span>) ![&lt;span class="nt">Image 2&lt;/span>](&lt;span class="na">2.jpg&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="水平分割线">水平分割线
&lt;/h2>&lt;p>下面是两种水平分割线：&lt;/p>
&lt;hr>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">代码:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">***
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="高级功能">高级功能
&lt;/h2>&lt;h2 id="表格">表格
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> Name | Age
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------|------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Bob | 27
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Alice | 23
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="注释">注释
&lt;/h2>&lt;p>注释的内容对用户不可见&lt;/p>
&lt;!-- 这里是注释的内容 -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- 这里是注释的内容 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="视频地址的引用">视频地址的引用
&lt;/h2>&lt;p>For more details, check out the &lt;a class="link" href="https://stack.jimmycai.com/writing/shortcodes" target="_blank" rel="noopener"
>documentation&lt;/a>.&lt;/p>
&lt;h3 id="youtube-video">YouTube video
&lt;/h3>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/0qwALOOvUik"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>格式:&lt;br>
&lt;code>{{&lt;/code> + &lt;code>视频标签&lt;/code> + &lt;code>}}&lt;/code>&lt;/p>
&lt;p>4种视频标签格式:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt; youtube &amp;#34;0qwALOOvUik&amp;#34; &amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt; bilibili &amp;#34;BV1d4411N7zD&amp;#34; &amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt; tencent &amp;#34;g0014r3khdw&amp;#34; &amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt; video &amp;#34;https://www.w3schools.com/tags/movie.mp4&amp;#34; &amp;gt; # 通用视频地址
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>vscode中的Markdown</title><link>https://knowckx.github.io/p/vscode-markdown/</link><pubDate>Sun, 01 Jan 2023 12:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/vscode-markdown/</guid><description>&lt;h2 id="markdown-all-in-one插件">Markdown All in One插件
&lt;/h2>&lt;h2 id="比较实用的功能">比较实用的功能
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;kbd>Ctrl&lt;/kbd> + &lt;kbd>B&lt;/kbd> -&amp;gt; &lt;strong>文字加粗&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开命令行，输入&lt;code>toc&lt;/code>, 根据多级标题实现目录功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先选中文本，再粘贴链接，快速创建超链接&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;kbd>Alt&lt;/kbd> + &lt;kbd>Shift&lt;/kbd> + &lt;kbd>F&lt;/kbd> -&amp;gt; 表格文本格式化（惊奇）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://github.com/yzhang-gh/vscode-markdown/raw/master/images/gifs/table-formatter.gif"
loading="lazy"
alt="alt text"
>&lt;/p></description></item><item><title>onenote生成目录</title><link>https://knowckx.github.io/p/onenote%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/</link><pubDate>Sat, 17 Sep 2022 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/onenote%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/</guid><description>&lt;p>Tips: 这是之前老blog的旧文章，从其他blog复制过来时图丢了&lt;/p>
&lt;hr>
&lt;p>&lt;strong>onenote&lt;/strong>这个笔记我大概使用了8年多， 现在重度依赖onenote来组织和收集知识。&lt;/p>
&lt;p>最近在研究给一个已定义好&lt;strong>分级标题&lt;/strong>的页面，生成大纲目录的方法。&lt;br>
(真想吐槽一下 这么简单的功能onenote就是不做)&lt;/p>
&lt;p>开始在网上搜集信息，已知的方法：&lt;/p>
&lt;ul>
&lt;li>通过自带的&lt;em>自定义标签&lt;/em>来实现&lt;/li>
&lt;li>通过付费插件 onetastic、数字珍宝来实现&lt;/li>
&lt;li>通过开源插件Onemore来现实&lt;/li>
&lt;/ul>
&lt;p>我最后测试了一下方案3，一个开源的插件：OneMore&lt;/p>
&lt;p>开源地址在github，&lt;a class="link" href="https://github.com/stevencohn/OneMore" target="_blank" rel="noopener"
>传送门&lt;/a>&lt;/p>
&lt;p>在release里可以下载安装。&lt;/p>
&lt;blockquote>
&lt;p>注意：需要&lt;code>office&lt;/code>版本的onenote，mac不支持，onenote for win10也不支持。&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>安装完成后可以在&lt;strong>开始&lt;/strong>里看到多了一栏菜单。&lt;/li>
&lt;li>在文中在设置好文本的各级标题后&lt;/li>
&lt;li>选择&lt;strong>片段&lt;/strong>-&lt;strong>目录&lt;/strong>, 会自动生成目录&lt;/li>
&lt;/ol>
&lt;p>目录生成后带了超链接 可以实现刷新，回到顶部等&lt;br>
感谢开源作者的付出！&lt;/p></description></item><item><title>golang获取一个周期的时间范围</title><link>https://knowckx.github.io/p/golang%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E5%91%A8%E6%9C%9F%E7%9A%84%E6%97%B6%E9%97%B4%E8%8C%83%E5%9B%B4/</link><pubDate>Sat, 02 Jul 2022 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/golang%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E5%91%A8%E6%9C%9F%E7%9A%84%E6%97%B6%E9%97%B4%E8%8C%83%E5%9B%B4/</guid><description>&lt;p>最近因为工作的原因在对接Azure的API，其中常常遇到一些接口，需要传入的参数是某一周或者某一月这段时间的起点和终点。&lt;/p>
&lt;p>写多了以后我想把这个事抽出来单独写个包，用来产生当天，当周，当月的时间范围，或者输入一个时间点输出那天所在的天，周，月的时间范围。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Knowckx/asukatime" target="_blank" rel="noopener"
>github地址&lt;/a>&lt;/p>
&lt;p>作用: 输入一个时间点，求该时间点所在的一天，一周，一月的起止时间范围，&lt;/p>
&lt;p>用法示例:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取某天的时间范围&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">input&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 2022-07-20 17:37:21&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">tr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">asukatime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetDayRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Start&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 2022-07-20 00:00:00&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">End&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 2022-07-20 23:59:59&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取某周的时间范围（默认周一是第一天）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">input&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 2022-07-20 17:37:21&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">tr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">asukatime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetWeekRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// [2022-07-18 00:00:00, 2022-07-24 23:59:59.999]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取某月的时间范围&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">input&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 2022-07-20 17:37:21&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">tr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">asukatime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetMonthRange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// [2022-07-01 00:00:00, 2022-07-31 23:59:59.999]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>欢迎大家直接调（懒惰是程序员进步的源泉233）&lt;/p></description></item><item><title>Redash可选的条件变量</title><link>https://knowckx.github.io/p/redash%E5%8F%AF%E9%80%89%E7%9A%84%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</link><pubDate>Wed, 15 Jun 2022 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/redash%E5%8F%AF%E9%80%89%E7%9A%84%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</guid><description>&lt;h2 id="metabase">metabase
&lt;/h2>&lt;p>以前使用过Metabase作为可视化分析工具，其中有一个特性就是作为转入参数的变量是可以被定义为可选的。&lt;br>
适应于有些写在where的条件但有时不需要被执行的子条件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{{&lt;/span>&lt;span class="n">valName&lt;/span>&lt;span class="err">}}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[[&lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{{&lt;/span>&lt;span class="n">valAge&lt;/span>&lt;span class="err">}}&lt;/span>&lt;span class="p">]]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面这个例子里，valAge假如不填值时整个&lt;code>and age = {{valAge}}&lt;/code>语句就不会被执行。&lt;/p>
&lt;h2 id="redash">redash
&lt;/h2>&lt;p>我们项目目前选了redash作为数据分析工具，主要是看重他的开发语言是python，方便以后的二次开发。&lt;br>
但是我今天发现Redash默认不支持类似metabase字段筛选option的功能。&lt;/p>
&lt;p>这很麻烦，因为有很多图表刚打开时就是需要一个默认的空白值存在。&lt;br>
而在redash里要实现这个功能，我今天想了一下需要一点SQL技巧，这里记录一下。&lt;/p>
&lt;p>在DropList中加入一个自定义选项，比如月份除了1~12这12个数字外，需要加上一个&lt;code>AlL&lt;/code>值。
每一个需要可选性的变量都按这下面的方式写&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{{ valMonth }}&amp;#39;&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;ALL&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">month&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{{ valMonth }}&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，当用户的默认输入选项值配置为&lt;code>AlL&lt;/code>时，实际上这个筛选项就没有生效。&lt;br>
即:通过SQL的语法短路间接实现可选筛选项的功能&lt;/p>
&lt;p>虽然丑了点，但是确实是可以工作的。&lt;/p>
&lt;p>其实这个特性在BI工具里非常常见，Redash至今没有支持也是一个遗憾。&lt;/p></description></item><item><title>科学上网-推荐一个自用的机场</title><link>https://knowckx.github.io/p/cfw-v2rayn-airport/</link><pubDate>Thu, 10 Apr 2025 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/cfw-v2rayn-airport/</guid><description>&lt;h2 id="更新">更新
&lt;/h2>&lt;p>&lt;strong>2025-07-05 凌晨更新&lt;/strong>&lt;/p>
&lt;p>暂时&lt;strong>不推荐&lt;/strong>这个机场!&lt;/p>
&lt;p>最近我发现刷&lt;code>youtube&lt;/code>时节点经常断流，更新了新的节点情况也没变好。&lt;br>
工单的回复是GFW的封杀缘故，但是无法令人信服(别的机场都好好的 就你特别？)&lt;br>
等待他的网络质量稳定下来再说吧。&lt;br>
同时我也在看看其他的机场，有好的我会更新。&lt;/p>
&lt;p>&lt;strong>2025-04-10 下午更新&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>机场我还在用，我应该是20年注册的，应该有5年多了。&lt;br>
（这么一个小站竟然没跑路，也挺神奇的）&lt;/li>
&lt;li>这个机场的节点过一段时间就会更新地址，记得[刷新订阅 + 节点测速 + 重新选择最优节点]&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://knowckx.github.io/p/cfw-v2rayn-airport/image-1.png"
width="525"
height="371"
srcset="https://knowckx.github.io/p/cfw-v2rayn-airport/image-1_hu_8de95d80101c967e.png 480w, https://knowckx.github.io/p/cfw-v2rayn-airport/image-1_hu_5cfec124163e22d3.png 1024w"
loading="lazy"
alt="我的购买记录"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;strong>2022-04-13 下午05:16更新&lt;/strong>&lt;/p>
&lt;p>今天v2ex的网友提出了这个机场的账号流量是&lt;code>100G/月&lt;/code>，这是我之前没有注意到的，&lt;br>
因为我平时使用完全够用，所有没有考虑这点，这里需要指出一下。&lt;/p>
&lt;h2 id="旧帖内容">旧帖内容
&lt;/h2>&lt;p>两年前我也为了一个稳定的科学上网手段折腾过，还专门买过服务器自建Shadowsocks。&lt;br>
后面发现这事不太靠谱，一但被墙锁定IP就要重新去VPS换新IP，不仅麻烦，而且换一次公网IP在很多VPS那边是收费项目。&lt;/p>
&lt;p>这时候我发现机场才是我这样的懒人最需要的东西。&lt;br>
交点钱，给我能稳定科学上网的节点，不要费心，不要整多余的事！&lt;/p>
&lt;p>目前这个机场我使用了2年半，感觉良好。&lt;br>
关键胜在节点多，费用也比较便宜。(假如你有edu邮箱，性价比很高)&lt;br>
所以推荐一下。&lt;/p>
&lt;p>下面说几个重点：&lt;/p>
&lt;ul>
&lt;li>这是个&lt;em>公益向&lt;/em>站点。最好使用&lt;code>edu邮箱&lt;/code>注册，买套餐时会有&lt;strong>50%优惠&lt;/strong>。&lt;/li>
&lt;li>登陆这个机场有时候需要挂VPN.&lt;/li>
&lt;li>假如你注册时需要邀请码，可以试试这个&lt;code>1KL9&lt;/code>, &lt;a class="link" href="https://okti.xyz/auth/register?code=1KL9" target="_blank" rel="noopener"
>带邀请的入口&lt;/a>。&lt;br>
通过邀请注册的用户可以获得0.99资金，可以免费使用公益节点套餐试用。&lt;/li>
&lt;li>&lt;a class="link" href="https://okti.xyz/auth/register" target="_blank" rel="noopener"
>不带邀请的入口&lt;/a>可以点击这里&lt;/li>
&lt;li>注册后记得加一下&lt;code>官方TG群&lt;/code>！ 他的域名可能会换(旧域名称发生过被GFW拦截)&lt;/li>
&lt;li>翻墙的客户端，Mac V2RayU / Windows V2RayN&lt;/li>
&lt;li>一个节点被封锁了 记得刷新一下订阅&lt;/li>
&lt;li>提供的节点比较多，推荐测速一下，使用你那边&lt;code>延迟最小&lt;/code>的那个节点。&lt;/li>
&lt;/ul>
&lt;p>最后的重点，&lt;strong>对于机场这东西，永远不推荐一上来就买长时间套餐！！&lt;/strong>&lt;/p>
&lt;p>假如你不放心，害怕他跑路，那就买个1毛钱/3毛钱的公益套餐&lt;code>多试用几次&lt;/code>！&lt;br>
1毛钱买不了吃亏买不了上当。&lt;/p>
&lt;p>祝你们玩得开心~&lt;/p></description></item><item><title>yfinance使用的示例</title><link>https://knowckx.github.io/p/yfinance%E4%BD%BF%E7%94%A8%E7%9A%84%E7%A4%BA%E4%BE%8B/</link><pubDate>Fri, 07 Mar 2025 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/yfinance%E4%BD%BF%E7%94%A8%E7%9A%84%E7%A4%BA%E4%BE%8B/</guid><description>&lt;h3 id="使用yfinance获取数据">使用yfinance获取数据
&lt;/h3>&lt;p>最近有需求，需要取一下美股的K线数据，搜了一圈最后选择了&lt;code>yfinance&lt;/code>这个包，结果第一次使用就报错了&lt;/p>
&lt;blockquote>
&lt;p>Too Many Requests. Rate limited. Try after a while.&lt;/p>&lt;/blockquote>
&lt;p>查了一圈最后发现，目前在国内调这个包需要挂代理了&lt;br>
我把示例代码贴这里，有需要的人可以直接粘贴过去调试。&lt;/p>
&lt;p>记得改成你本地的科学上网代理端口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">yfinance&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">yf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 定义纳斯达克100指数期货的代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ticker_symbol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;NQ=F&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置代理，指定HTTP 请求的代理服务器 | 使用你自己的代理端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">proxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;http://127.0.0.1:7890&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;HTTP_PROXY&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;HTTPS_PROXY&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建 Ticker 对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ticker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">yf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Ticker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ticker_symbol&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取最新的市场数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ticker_info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ticker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取当前价格和前收盘价&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">current_price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ticker_info&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;regularMarketPrice&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">previous_close&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ticker_info&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;regularMarketPreviousClose&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 计算涨幅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">price_change&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_price&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">previous_close&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">percent_change&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">price_change&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">previous_close&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 输出结果&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;当前价格: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">current_price&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;前收盘价: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">previous_close&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;涨跌额: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">price_change&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;涨跌幅: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">percent_change&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">.2f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">%&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了&lt;code>yfinance&lt;/code>之外，国内的&lt;code>新浪财经&lt;/code>也是很好的数据来源。 后面我再贴一些。&lt;/p></description></item><item><title>关于svn还原和重置命令</title><link>https://knowckx.github.io/p/%E5%85%B3%E4%BA%8Esvn%E8%BF%98%E5%8E%9F%E5%92%8C%E9%87%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 18 Aug 2022 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E5%85%B3%E4%BA%8Esvn%E8%BF%98%E5%8E%9F%E5%92%8C%E9%87%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/</guid><description>&lt;p>git重置本地修改很方便，可以&lt;strong>git reset &amp;ndash;hard&lt;/strong>&lt;/p>
&lt;p>查了下svn对应的操作:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">svn revert . -R &lt;span class="c1"># 还原所有更改&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">svn cleanup . --remove-unversioned &lt;span class="c1"># 清理未被版本控制的文件&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>knckx未来148</title><link>https://knowckx.github.io/p/seo-test-148/</link><pubDate>Fri, 11 Apr 2025 13:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/seo-test-148/</guid><description>&lt;p>注: 这篇文章只是为了测试google/bing之类的搜索引擎有没有正常收录站点文章， 没有实际价值&lt;/p>
&lt;h2 id="knowckxseo测试">knowckxSEO测试
&lt;/h2>&lt;p>内容 knckx未来369&lt;/p>
&lt;h3 id="检索测试">检索测试
&lt;/h3>&lt;p>knckx未来147 site:knowckx.github.io
knckx未来258 site:knowckx.github.io
未来5159 site:knowckx.github.io&lt;/p></description></item><item><title>评论系统测试页</title><link>https://knowckx.github.io/p/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95%E9%A1%B5/</link><pubDate>Sat, 17 Sep 2022 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95%E9%A1%B5/</guid><description>&lt;p>Tips: 此文章只是为了测试评论系统的效果。&lt;/p></description></item></channel></rss>