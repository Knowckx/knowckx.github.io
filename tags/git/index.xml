<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Knowckx's Blog</title><link>https://knowckx.github.io/tags/git/</link><description>Recent content in Git on Knowckx's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 12 Aug 2025 09:51:15 +0000</lastBuildDate><atom:link href="https://knowckx.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git删除远程分支某次commit的方法</title><link>https://knowckx.github.io/p/git%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%9F%90%E6%AC%A1commit%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 18 Sep 2024 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/git%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E6%9F%90%E6%AC%A1commit%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>&lt;h2 id="懒人阅读版">懒人阅读版
&lt;/h2>&lt;p>找到你需要去掉的commit的前一次的commitID&lt;/p>
&lt;p>执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git rebase -i commit_id -X their
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进入编辑后 在vi里 drop掉不需要的commit&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git push -f &lt;span class="c1"># 覆盖远程分支&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样远程分支的那次commit就彻底消失了。&lt;/p>
&lt;p>&lt;code>git push -f&lt;/code>是高危操作 不是特殊时刻不要用&lt;/p>
&lt;hr>
&lt;h2 id="原文">原文
&lt;/h2>&lt;p>最近遇到一个问题，我们的项目代码里，之前把一些&lt;em>密码&lt;/em>配置明文传到了github，&lt;br>
但是公司的安全策略不希望我们在代码里直接留有敏感的账号凭证信息，否则会被扫出来合规性问题。&lt;/p>
&lt;p>按照我同事之前的经历：安全部门扫出来之后就会发邮件给你老板，让你半夜起来马上消掉。&lt;br>
因此产生了一个需求，怎么把github上已提交的敏感信息抹掉呢？&lt;/p>
&lt;p>我调研了下，目前已知有几种方式：&lt;/p>
&lt;h3 id="通过git-revert-commit_id来实现">通过git revert commit_id来实现
&lt;/h3>&lt;p>git revert 可以撤销某次操作，他是通过提交一次新的commit来回滚之前的一次commit的内容，
大部分情况下这个功能是够用的。&lt;/p>
&lt;p>不适用我们的场景，因为旧的commit实际上不会消失，在github直接打开旧的commit，还是可以看到对应密码信息，不合规。&lt;/p>
&lt;h3 id="通过git-reset-hard-commit_id">通过git reset &amp;ndash;hard commit_id
&lt;/h3>&lt;p>直接重置到密码提交前的那一次commit，然后&lt;code>git push -f&lt;/code>重置分支&lt;/p>
&lt;p>这样做的前提条件是需要提交密码的那一次commit是最近发生的，&lt;br>
不然就需要手动把后面的历史commit都补回来，工作量很大&lt;/p>
&lt;h3 id="通过git-rebase--i-来实现丢弃一个commit">通过git rebase -i 来实现丢弃一个commit
&lt;/h3>&lt;p>这是今天发现的解决方案，有点类似于以前git合并多个commit的操作。&lt;br>
下面说下流程：&lt;/p>
&lt;ol>
&lt;li>找到你需要丢弃的commit_id
在我的例子里，我在&lt;code>bdfb32a&lt;/code>这次提交里提交了密码&lt;br>
这次commit的前一次是&lt;code>0119c21&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>所以执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git rebase -i 0119c21 -X their
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解释:&lt;br>
-i 进入交互模式&lt;br>
-X their 方便后续的commit自动合并，不然你需要手动操作冲突。&lt;/p>
&lt;ol start="2">
&lt;li>这时进入了vi的编辑界面，此时git会把commit_id之后发生的commit列出来，&lt;/li>
&lt;/ol>
&lt;p>我们按i进入编辑，手动把不需要的那个commit &lt;code>bdfb32a&lt;/code>前面的&lt;code>pick&lt;/code>改成&lt;code>drop&lt;/code>.&lt;/p>
&lt;ol start="3">
&lt;li>然后vi和rebase的基本操作：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">esc, :wd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rebase --continue
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>手动push 覆盖远程分支&lt;/li>
&lt;/ol>
&lt;p>此时你通过查看历史，比如&lt;code>git log -10&lt;/code>&lt;br>
应该可以看到commit的历史已经改变了，&lt;code>bdfb32a&lt;/code>已经彻底消失了(被丢弃)。&lt;/p>
&lt;p>执行&lt;code>git push -f&lt;/code>&lt;/p>
&lt;p>再去github看一下&lt;/p>
&lt;p>&lt;code>0119c21&lt;/code>之后的这次&lt;code>bdfb32a&lt;/code>已经抹除。&lt;/p>
&lt;p>收工~！&lt;/p></description></item><item><title>git rebase有个坑</title><link>https://knowckx.github.io/p/git-rebase-push-rejected/</link><pubDate>Fri, 28 Apr 2023 08:00:00 +0800</pubDate><guid>https://knowckx.github.io/p/git-rebase-push-rejected/</guid><description>&lt;h3 id="场景">场景:
&lt;/h3>&lt;p>这是一个Git在日常工作中非常核心的问题，很多工作了多年的同事也没吃透这个问题，没有正确理解&lt;code>merge&lt;/code>和&lt;code>rebase&lt;/code>的区别。 &lt;br>
今天我花时间自己做了几个实验，也算是明白了，记录一下。&lt;/p>
&lt;p>&lt;strong>常见场景&lt;/strong>&lt;br>
自己&lt;code>fork&lt;/code>了一个分支进行一个特性功能的开发，开发完了准备发起了&lt;code>PR&lt;/code>&lt;br>
结果发现在自己开发期间，&lt;code>主分支&lt;/code>有了几次新的合入。&lt;/p>
&lt;p>这时候你想把主分支的改动更新到本地。&lt;br>
为了让合并的历史更&lt;strong>优雅&lt;/strong>, 此时执行了&lt;code>git reabase upstream main&lt;/code>&lt;br>
此时问题来了，你会发现你的这个本地的分支&lt;code>push&lt;/code>不上去了。&lt;/p>
&lt;p>&lt;strong>原因&lt;/strong>&lt;br>
简单来说，&lt;code>git rebase&lt;/code> 操作修改了你本地分支的提交历史，使其与远程分支的提交历史产生了分歧。&lt;br>
Git为了保护远程分支不被意外覆盖，会拒绝你的&lt;code>non-fast-forward&lt;/code>推送。&lt;/p>
&lt;h3 id="正常的-git-push-流程">正常的 git push 流程
&lt;/h3>&lt;p>在没有冲突的情况下，&lt;code>git push&lt;/code> 遵循一个&lt;strong>快进式&lt;/strong>（Fast-forward）的原则。&lt;/p>
&lt;p>远程分支 (origin/my-feature) 的历史是:&lt;/p>
&lt;blockquote>
&lt;p>A &amp;mdash; B&lt;/p>&lt;/blockquote>
&lt;p>你拉取了代码，在本地 (my-feature) 继续工作，增加了提交 C:&lt;/p>
&lt;blockquote>
&lt;p>A &amp;mdash; B &amp;mdash; C&lt;/p>&lt;/blockquote>
&lt;p>当你执行 &lt;code>git push&lt;/code> 时，Git会比较你的本地分支和远程分支。&lt;br>
它发现你的本地分支只是在远程分支&lt;code>提交B&lt;/code>的基础上加了一个&lt;code>提交C&lt;/code>&lt;br>
于是它会执行一次&lt;strong>Fast-forward&lt;/strong>，直接把远程分支的指针移动到&lt;code>C&lt;/code>。&lt;br>
推送后，远程分支也变成了:&lt;/p>
&lt;blockquote>
&lt;p>A &amp;mdash; B &amp;mdash; C&lt;/p>&lt;/blockquote>
&lt;p>这个过程是最常见的，也是安全的，因为它只是在原有历史的末尾继续添加新内容，不会丢失任何东西。&lt;/p>
&lt;h3 id="git-rebase-的流程解释">git rebase 的流程解释
&lt;/h3>&lt;p>&lt;code>rebase&lt;/code> 的中文意思是&lt;strong>变基&lt;/strong>，它的核心作用是&lt;code>重写提交历史&lt;/code>，让分支历史变成一条直线更美观。&lt;/p>
&lt;p>假设你从 &lt;code>main&lt;/code> 分支切出了 &lt;code>my-feature&lt;/code> 分支并开始工作。&lt;/p>
&lt;blockquote>
&lt;p>main 分支: A &amp;mdash; B&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>my-feature 分支: A &amp;mdash; B &amp;mdash; C (你增加了提交 C)&lt;/p>&lt;/blockquote>
&lt;p>在你工作的时候，你的同事向 &lt;code>main&lt;/code> 分支推送了一个新的提交 D。&lt;/p>
&lt;blockquote>
&lt;p>main 分支现在是: A &amp;mdash; B &amp;mdash; D&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>你的 my-feature 分支还是: A &amp;mdash; B &amp;mdash; C&lt;/p>&lt;/blockquote>
&lt;p>此时，你的分支和 main 分支从提交 B 开始&lt;strong>分叉&lt;/strong>了。&lt;br>
为了让你的分支包含 main 的最新更改，你执行了 &lt;code>git rebase main&lt;/code>。&lt;/p>
&lt;p>rebase 会做以下事情：&lt;br>
a. 暂时&amp;quot;&lt;strong>收起&lt;/strong>&amp;ldquo;你在 &lt;code>my-feature&lt;/code> 分支上的独有提交（也就是 &lt;code>C&lt;/code>）。&lt;br>
b. 从与 &lt;code>main&lt;/code> 分支最后的共同提交B开始，抓取新增加的改动 &lt;code>D&lt;/code> 到 &lt;code>my-feature&lt;/code> 分支&lt;br>
c. 将刚才&lt;strong>收起&lt;/strong>的提交 &lt;code>C&lt;/code> 在新的起点 &lt;code>D&lt;/code> 上重新应用一遍。&lt;/p>
&lt;blockquote>
&lt;p>此时my-feature 分支变成了: A &amp;mdash; B &amp;mdash; D &amp;mdash; 收起的C&lt;/p>&lt;/blockquote>
&lt;p>关键点来了：&lt;br>
重新应用的 &lt;code>C&lt;/code> 这个提交，虽然代码内容没变，但它的&lt;code>父提交&lt;/code>从原来的 &lt;code>B&lt;/code> 变成了现在的 &lt;code>D&lt;/code>。&lt;br>
在Git中，一个提交的唯一标识&lt;code>SHA-1哈希值&lt;/code>是由其内容、作者、时间戳、以及&lt;strong>父提交&lt;/strong>等信息共同决定的。&lt;br>
&lt;strong>父提交&lt;/strong>变了，哈希值就会变！所以新的 &lt;code>C&lt;/code> 对应的hashID，和原来的 &lt;code>C&lt;/code> 是不同的 &lt;br>
你实际上得到一个内容完全一样，但是hashID变了的提交 &lt;code>C'&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>所以Rebase之后，my-feature 分支历史: A &amp;mdash; B &amp;mdash; D &amp;mdash; C'&lt;/p>&lt;/blockquote>
&lt;h3 id="为什么-rebase-后-push-会失败">为什么 rebase 后 push 会失败？
&lt;/h3>&lt;p>现在，我们来比较一下 &lt;code>rebase&lt;/code> 后的本地分支和远程分支&lt;/p>
&lt;blockquote>
&lt;p>本地 my-feature 分支: A &amp;mdash; B &amp;mdash; D &amp;mdash; C'&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>远程 origin/my-feature 分支: A &amp;mdash; B &amp;mdash; C&lt;/p>&lt;/blockquote>
&lt;p>当你执行 &lt;code>git push&lt;/code> 时，Git会进行比较，然后它会发现：
这两个分支从共同的祖先 B 开始就分道扬镳了。本地 &lt;code>my-feature&lt;/code>的历史里并没有包含远程的 &lt;code>C&lt;/code> 提交。&lt;br>
如果接受推送，远程的 &lt;code>C&lt;/code> 提交就会丢失，这太危险了！所以拒绝这次推送。&lt;/p>
&lt;p>这就是你看到的 (&lt;code>non-fast-forward&lt;/code>) 错误。&lt;br>
Git通过这个机制，防止你无意中覆盖掉远程仓库可能存在的、你本地没有的提交。&lt;/p>
&lt;h3 id="解决方式">解决方式:
&lt;/h3>&lt;p>&lt;strong>方式1&lt;/strong> 在使用&lt;code>fork&lt;/code>后的分支开发后，使用&lt;code>merge&lt;/code>策略来合并改动。&lt;br>
缺点: commit的历史线会比较混乱，不好看&lt;/p>
&lt;p>&lt;strong>方式2&lt;/strong> 使用&lt;code>reabse&lt;/code>后，搭配&lt;code>push -f&lt;/code>来强行更新&lt;strong>远程自己的分支&lt;/strong>，&lt;br>
Commit ID的历史会是一条直线，就像前面例子的&lt;code>A --- B --- D --- C'&lt;/code>，很会&lt;strong>优雅&lt;/strong>&lt;/p>
&lt;h3 id="解释push--f-的作用和风险">解释push -f 的作用和风险
&lt;/h3>&lt;p>&lt;code>git push --force&lt;/code> (或简写 &lt;code>-f&lt;/code>) 就是你给Git下的一个强制命令，意思是：&lt;/p>
&lt;blockquote>
&lt;p>“别管什么快进不快进了，也别管远程分支上有什么。我push给你的这个版本就是最终版本，你就用我这个版本去覆盖”&lt;/p>&lt;/blockquote>
&lt;p>执行 &lt;code>git push -f&lt;/code> 后，&lt;/p>
&lt;blockquote>
&lt;p>远程的 origin/my-feature 被强制更新为: A &amp;mdash; B &amp;mdash; D &amp;mdash; C'&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>git push -f&lt;/code> 是一个比较危险的操作，千万不要向公共分支（如 main, develop）执行 &lt;code>push -f&lt;/code>&lt;/p>
&lt;p>对于自己的特性分支执行是没有问题的。通常，一个特性分支只有你一个人在开发。&lt;br>
在你准备合并到主分支之前，用 rebase 来保持分支的整洁，然后用 &lt;code>push -f&lt;/code> 更新你自己的远程分支，这是非常常见的做法。&lt;/p>
&lt;p>&lt;strong>更安全的选择：&lt;code>git push --force-with-lease&lt;/code>&lt;/strong>&lt;br>
它在强制推送前会增加一个检查：只有当远程分支的状态和你本地最后一次拉取时一模一样，它才会执行强制推送。&lt;/p>
&lt;p>换句话说，如果在你执行 rebase 到你准备 push 的这段时间里，有其他人也向这个远程分支推送了新的提交，
&lt;code>--force-with-lease&lt;/code> 就会失败。这可以防止你覆盖掉别人在你不知情的情况下推送的工作。
日常工作中，推荐使用 &lt;code>git push --force-with-lease&lt;/code> 代替 &lt;code>git push -f&lt;/code>。&lt;/p></description></item></channel></rss>